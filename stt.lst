
stt.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	2cc0006f          	j	2cc <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	033c                	addi	a5,sp,392
   a:	0000                	unimp
   c:	034a                	slli	t1,t1,0x12
	...
  2e:	0000                	unimp
  30:	034a                	slli	t1,t1,0x12
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	034a                	slli	t1,t1,0x12
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	034a                	slli	t1,t1,0x12
  42:	0000                	unimp
  44:	034a                	slli	t1,t1,0x12
  46:	0000                	unimp
  48:	034a                	slli	t1,t1,0x12
  4a:	0000                	unimp
  4c:	034a                	slli	t1,t1,0x12
  4e:	0000                	unimp
  50:	034a                	slli	t1,t1,0x12
  52:	0000                	unimp
  54:	034a                	slli	t1,t1,0x12
  56:	0000                	unimp
  58:	034a                	slli	t1,t1,0x12
  5a:	0000                	unimp
  5c:	034a                	slli	t1,t1,0x12
  5e:	0000                	unimp
  60:	034a                	slli	t1,t1,0x12
  62:	0000                	unimp
  64:	034a                	slli	t1,t1,0x12
  66:	0000                	unimp
  68:	034a                	slli	t1,t1,0x12
  6a:	0000                	unimp
  6c:	034a                	slli	t1,t1,0x12
  6e:	0000                	unimp
  70:	034a                	slli	t1,t1,0x12
  72:	0000                	unimp
  74:	034a                	slli	t1,t1,0x12
  76:	0000                	unimp
  78:	034a                	slli	t1,t1,0x12
  7a:	0000                	unimp
  7c:	034a                	slli	t1,t1,0x12
  7e:	0000                	unimp
  80:	034a                	slli	t1,t1,0x12
  82:	0000                	unimp
  84:	034a                	slli	t1,t1,0x12
  86:	0000                	unimp
  88:	034a                	slli	t1,t1,0x12
  8a:	0000                	unimp
  8c:	0d8c                	addi	a1,sp,720
  8e:	0000                	unimp
  90:	034a                	slli	t1,t1,0x12
  92:	0000                	unimp
  94:	034a                	slli	t1,t1,0x12
  96:	0000                	unimp
  98:	034a                	slli	t1,t1,0x12
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	caad                	beqz	a3,1b8 <mini_pad+0x82>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	26f5                	jal	54e <memset>
     164:	4302                	lw	t1,0(sp)
     166:	4792                	lw	a5,4(sp)
     168:	872a                	mv	a4,a0
     16a:	008506b3          	add	a3,a0,s0
     16e:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     170:	40c485b3          	sub	a1,s1,a2
     174:	04b04463          	bgtz	a1,1bc <mini_pad+0x86>
     178:	0004d363          	bgez	s1,17e <mini_pad+0x48>
     17c:	4481                	li	s1,0
     17e:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     182:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     186:	02030463          	beqz	t1,1ae <mini_pad+0x78>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18a:	02c77263          	bgeu	a4,a2,1ae <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
     18e:	02a00793          	li	a5,42
     192:	fef60fa3          	sb	a5,-1(a2)
     196:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19a:	00d77a63          	bgeu	a4,a3,1ae <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
     19e:	fef60f23          	sb	a5,-2(a2)
     1a2:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a6:	00d77463          	bgeu	a4,a3,1ae <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
     1aa:	fef60ea3          	sb	a5,-3(a2)
}
     1ae:	40c2                	lw	ra,16(sp)
     1b0:	4432                	lw	s0,12(sp)
     1b2:	44a2                	lw	s1,8(sp)
     1b4:	0151                	addi	sp,sp,20
     1b6:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1b8:	86a6                	mv	a3,s1
     1ba:	bf59                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1bc:	00c785b3          	add	a1,a5,a2
     1c0:	0005c503          	lbu	a0,0(a1)
     1c4:	00c685b3          	add	a1,a3,a2
     1c8:	0605                	addi	a2,a2,1
     1ca:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1ce:	b74d                	j	170 <mini_pad+0x3a>

000001d0 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     1d0:	1101                	addi	sp,sp,-32
     1d2:	ce06                	sw	ra,28(sp)
     1d4:	cc22                	sw	s0,24(sp)
     1d6:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     1d8:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     1da:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     1dc:	00055763          	bgez	a0,1ea <mini_itoa.part.0+0x1a>
     1e0:	e689                	bnez	a3,1ea <mini_itoa.part.0+0x1a>
		negative = 1;
     1e2:	4785                	li	a5,1
		value = -value;
     1e4:	40a00333          	neg	t1,a0
		negative = 1;
     1e8:	c03e                	sw	a5,0(sp)
     1ea:	06100413          	li	s0,97
     1ee:	c219                	beqz	a2,1f4 <mini_itoa.part.0+0x24>
     1f0:	04100413          	li	s0,65
	int	negative = 0;
     1f4:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     1f6:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     1f8:	851a                	mv	a0,t1
     1fa:	c83a                	sw	a4,16(sp)
     1fc:	c21a                	sw	t1,4(sp)
     1fe:	c62e                	sw	a1,12(sp)
     200:	c41a                	sw	t1,8(sp)
     202:	35ed                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     204:	47a5                	li	a5,9
     206:	4322                	lw	t1,8(sp)
     208:	45b2                	lw	a1,12(sp)
     20a:	4742                	lw	a4,16(sp)
     20c:	0ff57693          	andi	a3,a0,255
     210:	06a7e163          	bltu	a5,a0,272 <mini_itoa.part.0+0xa2>
     214:	03068693          	addi	a3,a3,48
     218:	0ff6f693          	andi	a3,a3,255
     21c:	00148793          	addi	a5,s1,1
     220:	00d48023          	sb	a3,0(s1)
		value /= radix;
     224:	851a                	mv	a0,t1
     226:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     228:	c63e                	sw	a5,12(sp)
		value /= radix;
     22a:	c42e                	sw	a1,8(sp)
     22c:	3d51                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     22e:	4692                	lw	a3,4(sp)
     230:	45a2                	lw	a1,8(sp)
     232:	47b2                	lw	a5,12(sp)
     234:	4742                	lw	a4,16(sp)
		value /= radix;
     236:	832a                	mv	t1,a0
	} while (value > 0);
     238:	02b6fb63          	bgeu	a3,a1,26e <mini_itoa.part.0+0x9e>
	if (negative)
     23c:	4682                	lw	a3,0(sp)
     23e:	c699                	beqz	a3,24c <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     240:	02d00693          	li	a3,45
     244:	00d78023          	sb	a3,0(a5)
     248:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     24c:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     250:	01f55693          	srli	a3,a0,0x1f
     254:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     256:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     25a:	8685                	srai	a3,a3,0x1
     25c:	4601                	li	a2,0
     25e:	17fd                	addi	a5,a5,-1
     260:	00d64b63          	blt	a2,a3,276 <mini_itoa.part.0+0xa6>
}
     264:	40f2                	lw	ra,28(sp)
     266:	4462                	lw	s0,24(sp)
     268:	44d2                	lw	s1,20(sp)
     26a:	6105                	addi	sp,sp,32
     26c:	8082                	ret
	} while (value > 0);
     26e:	84be                	mv	s1,a5
     270:	b761                	j	1f8 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     272:	96a2                	add	a3,a3,s0
     274:	b755                	j	218 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     276:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     27a:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     27e:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     282:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     284:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     288:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     28c:	bfc9                	j	25e <mini_itoa.part.0+0x8e>

0000028e <_write.constprop.0>:
	USART1->CTLR1 |= CTLR1_UE_Set;
#endif
}

// For debug writing to the UART.
WEAK int _write(int fd, const char *buf, int size)
     28e:	872a                	mv	a4,a0
{
	for(int i = 0; i < size; i++){
     290:	4781                	li	a5,0
WEAK int _write(int fd, const char *buf, int size)
     292:	852e                	mv	a0,a1
#ifdef CH5xx
		while(!(R8_UART1_LSR & RB_LSR_TX_ALL_EMP));
		R8_UART1_THR = buf[i];
#else
		while( !(USART1->STATR & USART_FLAG_TC));
     294:	40014637          	lui	a2,0x40014
	for(int i = 0; i < size; i++){
     298:	00a7c363          	blt	a5,a0,29e <_write.constprop.0+0x10>
		USART1->DATAR = *buf++;
#endif
	}
	return size;
}
     29c:	8082                	ret
		while( !(USART1->STATR & USART_FLAG_TC));
     29e:	80062683          	lw	a3,-2048(a2) # 40013800 <_eusrstack+0x20013000>
     2a2:	0406f693          	andi	a3,a3,64
     2a6:	dee5                	beqz	a3,29e <_write.constprop.0+0x10>
		USART1->DATAR = *buf++;
     2a8:	00f706b3          	add	a3,a4,a5
     2ac:	0006c683          	lbu	a3,0(a3)
	for(int i = 0; i < size; i++){
     2b0:	0785                	addi	a5,a5,1
		USART1->DATAR = *buf++;
     2b2:	80d62223          	sw	a3,-2044(a2)
     2b6:	b7cd                	j	298 <_write.constprop.0+0xa>

000002b8 <__puts_uart>:
{
     2b8:	1151                	addi	sp,sp,-12
     2ba:	c222                	sw	s0,4(sp)
     2bc:	c406                	sw	ra,8(sp)
     2be:	842e                	mv	s0,a1
	_write( 0, s, len );
     2c0:	37f9                	jal	28e <_write.constprop.0>
}
     2c2:	40a2                	lw	ra,8(sp)
     2c4:	8522                	mv	a0,s0
     2c6:	4412                	lw	s0,4(sp)
     2c8:	0131                	addi	sp,sp,12
     2ca:	8082                	ret

000002cc <handle_reset>:
	asm volatile( "\n\
     2cc:	20000197          	auipc	gp,0x20000
     2d0:	13018193          	addi	gp,gp,304 # 200003fc <__global_pointer$>
     2d4:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     2d8:	6509                	lui	a0,0x2
     2da:	88050513          	addi	a0,a0,-1920 # 1880 <ch32fun.c.7589f8fb+0x5cc>
     2de:	30051073          	csrw	mstatus,a0
     2e2:	468d                	li	a3,3
     2e4:	00000517          	auipc	a0,0x0
     2e8:	d1c50513          	addi	a0,a0,-740 # 0 <InterruptVector>
     2ec:	8d55                	or	a0,a0,a3
     2ee:	30551073          	csrw	mtvec,a0
asm volatile(
     2f2:	c0418513          	addi	a0,gp,-1020 # 20000000 <count>
     2f6:	2a418593          	addi	a1,gp,676 # 200006a0 <_ebss>
     2fa:	4601                	li	a2,0
     2fc:	00b55663          	bge	a0,a1,308 <handle_reset+0x3c>
     300:	c110                	sw	a2,0(a0)
     302:	0511                	addi	a0,a0,4
     304:	feb54ee3          	blt	a0,a1,300 <handle_reset+0x34>
     308:	00002517          	auipc	a0,0x2
     30c:	ea050513          	addi	a0,a0,-352 # 21a8 <_data_lma>
     310:	c0418593          	addi	a1,gp,-1020 # 20000000 <count>
     314:	c0418613          	addi	a2,gp,-1020 # 20000000 <count>
     318:	00c58863          	beq	a1,a2,328 <handle_reset+0x5c>
     31c:	4114                	lw	a3,0(a0)
     31e:	c194                	sw	a3,0(a1)
     320:	0511                	addi	a0,a0,4
     322:	0591                	addi	a1,a1,4
     324:	fec59ae3          	bne	a1,a2,318 <handle_reset+0x4c>
	SysTick->CTLR = 1;
     328:	e000f7b7          	lui	a5,0xe000f
     32c:	4705                	li	a4,1
     32e:	c398                	sw	a4,0(a5)
asm volatile(
     330:	6a200793          	li	a5,1698
     334:	34179073          	csrw	mepc,a5
     338:	30200073          	mret

0000033c <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     33c:	40021737          	lui	a4,0x40021
     340:	471c                	lw	a5,8(a4)
     342:	008006b7          	lui	a3,0x800
     346:	8fd5                	or	a5,a5,a3
     348:	c71c                	sw	a5,8(a4)

0000034a <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     34a:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     34e:	2ca1                	jal	5a6 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     350:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     354:	2c89                	jal	5a6 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     356:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     35a:	24b1                	jal	5a6 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     35c:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     360:	2499                	jal	5a6 <PrintHex>
	putchar( '\n' );
     362:	4529                	li	a0,10
     364:	2425                	jal	58c <putchar>
	asm volatile( "1: j 1b" );
     366:	a001                	j	366 <ADC1_2_IRQHandler+0x1c>

00000368 <strlen>:
{
     368:	87aa                	mv	a5,a0
	for (; *s; s++);
     36a:	0007c703          	lbu	a4,0(a5) # e000f000 <_eusrstack+0xc000e800>
     36e:	e701                	bnez	a4,376 <strlen+0xe>
}
     370:	40a78533          	sub	a0,a5,a0
     374:	8082                	ret
	for (; *s; s++);
     376:	0785                	addi	a5,a5,1
     378:	bfcd                	j	36a <strlen+0x2>

0000037a <mini_vpprintf>:
{
     37a:	fa410113          	addi	sp,sp,-92
     37e:	c8a6                	sw	s1,80(sp)
     380:	cc86                	sw	ra,88(sp)
     382:	caa2                	sw	s0,84(sp)
     384:	c02a                	sw	a0,0(sp)
     386:	c22e                	sw	a1,4(sp)
     388:	84b2                	mv	s1,a2
     38a:	87b6                	mv	a5,a3
	int n = 0;
     38c:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     38e:	0004c703          	lbu	a4,0(s1)
     392:	00148413          	addi	s0,s1,1
     396:	00e10fa3          	sb	a4,31(sp)
     39a:	eb01                	bnez	a4,3aa <mini_vpprintf+0x30>
}
     39c:	40e6                	lw	ra,88(sp)
     39e:	4456                	lw	s0,84(sp)
     3a0:	4542                	lw	a0,16(sp)
     3a2:	44c6                	lw	s1,80(sp)
     3a4:	05c10113          	addi	sp,sp,92
     3a8:	8082                	ret
		if (ch!='%') {
     3aa:	02500693          	li	a3,37
     3ae:	00d70f63          	beq	a4,a3,3cc <mini_vpprintf+0x52>
     3b2:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     3b4:	4612                	lw	a2,4(sp)
     3b6:	4782                	lw	a5,0(sp)
     3b8:	4585                	li	a1,1
     3ba:	01f10513          	addi	a0,sp,31
     3be:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     3c0:	84a2                	mv	s1,s0
		n = n + len;
     3c2:	47c2                	lw	a5,16(sp)
     3c4:	97aa                	add	a5,a5,a0
     3c6:	c83e                	sw	a5,16(sp)
     3c8:	47a2                	lw	a5,8(sp)
     3ca:	b7d1                	j	38e <mini_vpprintf+0x14>
			ch=*(fmt++);
     3cc:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     3d0:	03000613          	li	a2,48
			ch=*(fmt++);
     3d4:	00248713          	addi	a4,s1,2
     3d8:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     3dc:	03000413          	li	s0,48
     3e0:	08c69063          	bne	a3,a2,460 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     3e4:	84ba                	mv	s1,a4
     3e6:	4601                	li	a2,0
     3e8:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     3ea:	4525                	li	a0,9
     3ec:	a811                	j	400 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     3ee:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     3f2:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     3f4:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     3f6:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     3fa:	0706                	slli	a4,a4,0x1
     3fc:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     3fe:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     400:	fd068593          	addi	a1,a3,-48 # 7fffd0 <stt.c.5fff5958+0x7fdb8b>
     404:	0ff5f313          	andi	t1,a1,255
     408:	fe6573e3          	bgeu	a0,t1,3ee <mini_vpprintf+0x74>
     40c:	c219                	beqz	a2,412 <mini_vpprintf+0x98>
     40e:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     412:	c63a                	sw	a4,12(sp)
     414:	4661                	li	a2,24
     416:	00e65363          	bge	a2,a4,41c <mini_vpprintf+0xa2>
     41a:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     41c:	06c00593          	li	a1,108
			char l = 0;
     420:	4601                	li	a2,0
			if (ch == 'l') {
     422:	00b69863          	bne	a3,a1,432 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     426:	0004c683          	lbu	a3,0(s1)
				l = 1;
     42a:	4605                	li	a2,1
				ch=*(fmt++);
     42c:	0485                	addi	s1,s1,1
     42e:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     432:	01f14683          	lbu	a3,31(sp)
     436:	06400593          	li	a1,100
     43a:	06b68363          	beq	a3,a1,4a0 <mini_vpprintf+0x126>
     43e:	02d5e463          	bltu	a1,a3,466 <mini_vpprintf+0xec>
     442:	05800713          	li	a4,88
     446:	0ae68063          	beq	a3,a4,4e6 <mini_vpprintf+0x16c>
     44a:	06300713          	li	a4,99
     44e:	0ae68d63          	beq	a3,a4,508 <mini_vpprintf+0x18e>
     452:	d6a9                	beqz	a3,39c <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     454:	4612                	lw	a2,4(sp)
     456:	c43e                	sw	a5,8(sp)
     458:	4585                	li	a1,1
     45a:	01f10513          	addi	a0,sp,31
     45e:	a0bd                	j	4cc <mini_vpprintf+0x152>
			char pad_char = ' ';
     460:	02000413          	li	s0,32
     464:	b741                	j	3e4 <mini_vpprintf+0x6a>
			switch (ch) {
     466:	07500593          	li	a1,117
     46a:	02b68b63          	beq	a3,a1,4a0 <mini_vpprintf+0x126>
     46e:	07800613          	li	a2,120
     472:	06c68a63          	beq	a3,a2,4e6 <mini_vpprintf+0x16c>
     476:	07300613          	li	a2,115
     47a:	fcc69de3          	bne	a3,a2,454 <mini_vpprintf+0xda>
     47e:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     480:	00478713          	addi	a4,a5,4
     484:	439c                	lw	a5,0(a5)
     486:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     488:	853e                	mv	a0,a5
     48a:	ca3e                	sw	a5,20(sp)
     48c:	3df1                	jal	368 <strlen>
					if (pad_to > 0) {
     48e:	4762                	lw	a4,24(sp)
     490:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     492:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     494:	c759                	beqz	a4,522 <mini_vpprintf+0x1a8>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     496:	46b2                	lw	a3,12(sp)
     498:	1838                	addi	a4,sp,56
     49a:	8622                	mv	a2,s0
     49c:	853e                	mv	a0,a5
     49e:	a01d                	j	4c4 <mini_vpprintf+0x14a>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     4a0:	00478713          	addi	a4,a5,4
     4a4:	c43a                	sw	a4,8(sp)
					if(l) {
     4a6:	c615                	beqz	a2,4d2 <mini_vpprintf+0x158>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     4a8:	f8b68693          	addi	a3,a3,-117
     4ac:	1018                	addi	a4,sp,32
     4ae:	0016b693          	seqz	a3,a3
     4b2:	4388                	lw	a0,0(a5)
     4b4:	4601                	li	a2,0
     4b6:	45a9                	li	a1,10
     4b8:	3b21                	jal	1d0 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     4ba:	46b2                	lw	a3,12(sp)
     4bc:	1838                	addi	a4,sp,56
     4be:	8622                	mv	a2,s0
     4c0:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     4c2:	1008                	addi	a0,sp,32
     4c4:	398d                	jal	136 <mini_pad>
					len = puts(bf, len, buf);
     4c6:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     4c8:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     4ca:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     4cc:	4782                	lw	a5,0(sp)
     4ce:	9782                	jalr	a5
					break;
     4d0:	bdcd                	j	3c2 <mini_vpprintf+0x48>
						if(ch == 'u') {
     4d2:	07500713          	li	a4,117
     4d6:	00e69563          	bne	a3,a4,4e0 <mini_vpprintf+0x166>
	if (radix > 16)
     4da:	1018                	addi	a4,sp,32
     4dc:	4685                	li	a3,1
     4de:	bfd1                	j	4b2 <mini_vpprintf+0x138>
     4e0:	1018                	addi	a4,sp,32
     4e2:	4681                	li	a3,0
     4e4:	b7f9                	j	4b2 <mini_vpprintf+0x138>
					if(l) {
     4e6:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     4e8:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     4ec:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     4f0:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     4f2:	4685                	li	a3,1
     4f4:	1018                	addi	a4,sp,32
     4f6:	00163613          	seqz	a2,a2
     4fa:	45c1                	li	a1,16
     4fc:	39d1                	jal	1d0 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     4fe:	46b2                	lw	a3,12(sp)
     500:	85aa                	mv	a1,a0
     502:	1838                	addi	a4,sp,56
     504:	8622                	mv	a2,s0
     506:	bf75                	j	4c2 <mini_vpprintf+0x148>
					ch = (char)(va_arg(va, int));
     508:	00478713          	addi	a4,a5,4
     50c:	439c                	lw	a5,0(a5)
     50e:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     510:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     512:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     516:	1838                	addi	a4,sp,56
     518:	8622                	mv	a2,s0
     51a:	4585                	li	a1,1
     51c:	01f10513          	addi	a0,sp,31
     520:	b755                	j	4c4 <mini_vpprintf+0x14a>
						len = puts(ptr, len, buf);
     522:	4612                	lw	a2,4(sp)
     524:	853e                	mv	a0,a5
     526:	b75d                	j	4cc <mini_vpprintf+0x152>

00000528 <printf>:
{
     528:	fdc10113          	addi	sp,sp,-36
     52c:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     52e:	862a                	mv	a2,a0
{
     530:	c82e                	sw	a1,16(sp)
     532:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     534:	4581                	li	a1,0
	va_start( args, format );
     536:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     538:	2b800513          	li	a0,696
{
     53c:	c606                	sw	ra,12(sp)
     53e:	ce3a                	sw	a4,28(sp)
     540:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     542:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     544:	3d1d                	jal	37a <mini_vpprintf>
}
     546:	40b2                	lw	ra,12(sp)
     548:	02410113          	addi	sp,sp,36
     54c:	8082                	ret

0000054e <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     54e:	962a                	add	a2,a2,a0
     550:	87aa                	mv	a5,a0
     552:	00c79363          	bne	a5,a2,558 <memset+0xa>
     556:	8082                	ret
     558:	00b78023          	sb	a1,0(a5)
     55c:	0785                	addi	a5,a5,1
     55e:	bfd5                	j	552 <memset+0x4>

00000560 <puts>:
{
     560:	1151                	addi	sp,sp,-12
     562:	c406                	sw	ra,8(sp)
     564:	c222                	sw	s0,4(sp)
     566:	c026                	sw	s1,0(sp)
     568:	84aa                	mv	s1,a0
	int sl = strlen( s );
     56a:	3bfd                	jal	368 <strlen>
     56c:	842a                	mv	s0,a0
	_write(0, s, sl );
     56e:	85aa                	mv	a1,a0
     570:	8526                	mv	a0,s1
     572:	3b31                	jal	28e <_write.constprop.0>
	_write(0, "\n", 1 );
     574:	6505                	lui	a0,0x1
     576:	4585                	li	a1,1
     578:	f6050513          	addi	a0,a0,-160 # f60 <TIM1_UP_IRQHandler+0x1d4>
     57c:	3b09                	jal	28e <_write.constprop.0>
}
     57e:	40a2                	lw	ra,8(sp)
     580:	00140513          	addi	a0,s0,1
     584:	4412                	lw	s0,4(sp)
     586:	4482                	lw	s1,0(sp)
     588:	0131                	addi	sp,sp,12
     58a:	8082                	ret

0000058c <putchar>:
{
#ifdef CH5xx
	while(!(R8_UART1_LSR & RB_LSR_TX_ALL_EMP));
	R8_UART1_THR = c;
#else
	while( !(USART1->STATR & USART_FLAG_TC));
     58c:	40014737          	lui	a4,0x40014
     590:	80072783          	lw	a5,-2048(a4) # 40013800 <_eusrstack+0x20013000>
     594:	0407f793          	andi	a5,a5,64
     598:	dfe5                	beqz	a5,590 <putchar+0x4>
	USART1->DATAR = (const char)c;
     59a:	0ff57513          	andi	a0,a0,255
     59e:	80a72223          	sw	a0,-2044(a4)
#endif
	return 1;
}
     5a2:	4505                	li	a0,1
     5a4:	8082                	ret

000005a6 <PrintHex>:
{
     5a6:	1151                	addi	sp,sp,-12
     5a8:	c026                	sw	s1,0(sp)
     5aa:	84aa                	mv	s1,a0
	putchar( ' ' );
     5ac:	02000513          	li	a0,32
{
     5b0:	c406                	sw	ra,8(sp)
     5b2:	c222                	sw	s0,4(sp)
	putchar( ' ' );
     5b4:	3fe1                	jal	58c <putchar>
	putchar( '0' );
     5b6:	03000513          	li	a0,48
     5ba:	3fc9                	jal	58c <putchar>
	putchar( 'x' );
     5bc:	07800513          	li	a0,120
     5c0:	37f1                	jal	58c <putchar>
	for( shift = 28; shift >= 0; shift -= 4 )
     5c2:	4471                	li	s0,28
		int s = (n>>shift) & 0xf;
     5c4:	0084d7b3          	srl	a5,s1,s0
     5c8:	8bbd                	andi	a5,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     5ca:	4725                	li	a4,9
     5cc:	03000513          	li	a0,48
     5d0:	00f75463          	bge	a4,a5,5d8 <PrintHex+0x32>
     5d4:	05700513          	li	a0,87
		putchar( s );
     5d8:	953e                	add	a0,a0,a5
     5da:	3f4d                	jal	58c <putchar>
	for( shift = 28; shift >= 0; shift -= 4 )
     5dc:	1471                	addi	s0,s0,-4
     5de:	57f1                	li	a5,-4
     5e0:	fef412e3          	bne	s0,a5,5c4 <PrintHex+0x1e>
}
     5e4:	40a2                	lw	ra,8(sp)
     5e6:	4412                	lw	s0,4(sp)
     5e8:	4482                	lw	s1,0(sp)
     5ea:	0131                	addi	sp,sp,12
     5ec:	8082                	ret

000005ee <SystemInit>:
//#define BASE_CTLR	(((FUNCONF_HSITRIM) << 3) | HSEBYP | RCC_CSS)	// disable HSI in HSE modes

	// Flash latency settings.
#if defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
     5ee:	400227b7          	lui	a5,0x40022
     5f2:	4705                	li	a4,1
     5f4:	c398                	sw	a4,0(a5)
	#endif

#elif defined(FUNCONF_USE_HSE) && FUNCONF_USE_HSE

	#if defined(CH32V003) || defined(CH32V00x)
		RCC->CTLR = BASE_CTLR | RCC_HSION | RCC_HSEON ;       		  // Keep HSI on while turning on HSE
     5f6:	000907b7          	lui	a5,0x90
     5fa:	08178793          	addi	a5,a5,129 # 90081 <stt.c.5fff5958+0x8dc3c>
     5fe:	40021737          	lui	a4,0x40021
     602:	c31c                	sw	a5,0(a4)
	#else
		RCC->CTLR = RCC_HSEON;							  			  // Only turn on HSE.
	#endif

	// Values lifted from the EVT.  There is little to no documentation on what this does.
	while(!(RCC->CTLR&RCC_HSERDY)) {};
     604:	000206b7          	lui	a3,0x20
     608:	400217b7          	lui	a5,0x40021
     60c:	4398                	lw	a4,0(a5)
     60e:	8f75                	and	a4,a4,a3
     610:	df75                	beqz	a4,60c <SystemInit+0x1e>

	#if defined(CH32V003) || defined(CH32V00x)
		RCC->CFGR0 = RCC_PLLSRC_HSE_Mul2 | RCC_SW_HSE;
     612:	6741                	lui	a4,0x10
     614:	0705                	addi	a4,a4,1
     616:	c3d8                	sw	a4,4(a5)
	#else
		RCC->CFGR0 = BASE_CFGR0 | RCC_PLLSRC_HSE | RCC_PLLXTPRE_HSE;
	#endif

	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CTLR  = BASE_CTLR | RCC_HSEON | RCC_PLLON;            // Turn off HSI.
     618:	01090737          	lui	a4,0x1090
     61c:	08170713          	addi	a4,a4,129 # 1090081 <stt.c.5fff5958+0x108dc3c>
     620:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_0;
	#endif
#endif

#ifndef CH5xx
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
     622:	009f0737          	lui	a4,0x9f0
     626:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH5xx)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
     628:	020006b7          	lui	a3,0x2000
     62c:	40021737          	lui	a4,0x40021
     630:	431c                	lw	a5,0(a4)
     632:	8ff5                	and	a5,a5,a3
     634:	dff5                	beqz	a5,630 <SystemInit+0x42>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     636:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     638:	4621                	li	a2,8
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     63a:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
     63c:	0027e793          	ori	a5,a5,2
     640:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     642:	400217b7          	lui	a5,0x40021
     646:	43d8                	lw	a4,4(a5)
     648:	8b31                	andi	a4,a4,12
     64a:	fec71ee3          	bne	a4,a2,646 <SystemInit+0x58>
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_USART1;
     64e:	4f98                	lw	a4,24(a5)
     650:	6691                	lui	a3,0x4
     652:	02068693          	addi	a3,a3,32 # 4020 <stt.c.5fff5958+0x1bdb>
     656:	8f55                	or	a4,a4,a3
     658:	cf98                	sw	a4,24(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*5));
     65a:	400117b7          	lui	a5,0x40011
     65e:	4007a703          	lw	a4,1024(a5) # 40011400 <_eusrstack+0x20010c00>
     662:	ff1006b7          	lui	a3,0xff100
     666:	16fd                	addi	a3,a3,-1
     668:	8f75                	and	a4,a4,a3
     66a:	40e7a023          	sw	a4,1024(a5)
	GPIOD->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*5);
     66e:	4007a703          	lw	a4,1024(a5)
     672:	009006b7          	lui	a3,0x900
     676:	8f55                	or	a4,a4,a3
     678:	40e7a023          	sw	a4,1024(a5)
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
     67c:	400147b7          	lui	a5,0x40014
     680:	80c7a623          	sw	a2,-2036(a5) # 4001380c <_eusrstack+0x2001300c>
	USART1->CTLR2 = USART_StopBits_1;
     684:	8007a823          	sw	zero,-2032(a5)
	USART1->CTLR3 = USART_HardwareFlowControl_None;
     688:	8007aa23          	sw	zero,-2028(a5)
	USART1->BRR = uartBRR;
     68c:	0d000713          	li	a4,208
     690:	80e7a423          	sw	a4,-2040(a5)
	USART1->CTLR1 |= CTLR1_UE_Set;
     694:	80c7a703          	lw	a4,-2036(a5)
     698:	6689                	lui	a3,0x2
     69a:	8f55                	or	a4,a4,a3
     69c:	80e7a623          	sw	a4,-2036(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     6a0:	8082                	ret

000006a2 <main>:
  } else
    return (first[a]);
}

//-----------------------------------------------------------------------------------
int main() {
     6a2:	715d                	addi	sp,sp,-80
     6a4:	c686                	sw	ra,76(sp)
     6a6:	c4a2                	sw	s0,72(sp)
     6a8:	c2a6                	sw	s1,68(sp)
  SystemInit();
     6aa:	3791                	jal	5ee <SystemInit>
  printf("Initializing ADC... (on pin PD4...)\r\n");
     6ac:	6505                	lui	a0,0x1
     6ae:	ec850513          	addi	a0,a0,-312 # ec8 <TIM1_UP_IRQHandler+0x13c>
     6b2:	357d                	jal	560 <puts>
  RCC->CFGR0 &= ~(0x1F << 11);
     6b4:	400217b7          	lui	a5,0x40021
     6b8:	43d8                	lw	a4,4(a5)
     6ba:	76c1                	lui	a3,0xffff0
     6bc:	7ff68693          	addi	a3,a3,2047 # ffff07ff <_eusrstack+0xdffeffff>
     6c0:	8f75                	and	a4,a4,a3
     6c2:	c3d8                	sw	a4,4(a5)
  RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_ADC1;
     6c4:	4f98                	lw	a4,24(a5)
  GPIOD->CFGLR &= ~(0xf << (4 * 4)); // pin D4 analog-in  now
     6c6:	40011637          	lui	a2,0x40011
     6ca:	fff106b7          	lui	a3,0xfff10
  RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_ADC1;
     6ce:	22076713          	ori	a4,a4,544
     6d2:	cf98                	sw	a4,24(a5)
  GPIOD->CFGLR &= ~(0xf << (4 * 4)); // pin D4 analog-in  now
     6d4:	40062703          	lw	a4,1024(a2) # 40011400 <_eusrstack+0x20010c00>
     6d8:	16fd                	addi	a3,a3,-1
  ADC1->RSQR1 = 0;
     6da:	40012437          	lui	s0,0x40012
  GPIOD->CFGLR &= ~(0xf << (4 * 4)); // pin D4 analog-in  now
     6de:	8f75                	and	a4,a4,a3
     6e0:	40e62023          	sw	a4,1024(a2)
  RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
     6e4:	47d8                	lw	a4,12(a5)
  printf("Calibrating ADC...\r\n");
     6e6:	6505                	lui	a0,0x1
     6e8:	ef050513          	addi	a0,a0,-272 # ef0 <TIM1_UP_IRQHandler+0x164>
  RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
     6ec:	20076713          	ori	a4,a4,512
     6f0:	c7d8                	sw	a4,12(a5)
  RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
     6f2:	47d8                	lw	a4,12(a5)
     6f4:	dff77713          	andi	a4,a4,-513
     6f8:	c7d8                	sw	a4,12(a5)
  ADC1->RSQR1 = 0;
     6fa:	42042623          	sw	zero,1068(s0) # 4001242c <_eusrstack+0x20011c2c>
  ADC1->RSQR2 = 0;
     6fe:	42042823          	sw	zero,1072(s0)
  ADC1->RSQR3 = 7;
     702:	479d                	li	a5,7
     704:	42f42a23          	sw	a5,1076(s0)
  ADC1->SAMPTR2 &= ~(ADC_SMP0 << (3 * 7));
     708:	41042783          	lw	a5,1040(s0)
     70c:	ff200737          	lui	a4,0xff200
     710:	177d                	addi	a4,a4,-1
     712:	8ff9                	and	a5,a5,a4
     714:	40f42823          	sw	a5,1040(s0)
  ADC1->SAMPTR2 |= 7 << (3 * 7); // 0:7 => 3/9/15/30/43/57/73/241 cycles
     718:	41042783          	lw	a5,1040(s0)
     71c:	00e00737          	lui	a4,0xe00
     720:	8fd9                	or	a5,a5,a4
     722:	40f42823          	sw	a5,1040(s0)
  ADC1->CTLR2 = ADC_ADON | ADC_EXTSEL;
     726:	000e07b7          	lui	a5,0xe0
     72a:	0785                	addi	a5,a5,1
     72c:	40f42423          	sw	a5,1032(s0)
  printf("Calibrating ADC...\r\n");
     730:	3d05                	jal	560 <puts>
  ADC1->CTLR2 |= ADC_RSTCAL;
     732:	40842783          	lw	a5,1032(s0)
  while (ADC1->CTLR2 & ADC_RSTCAL)
     736:	400126b7          	lui	a3,0x40012
  ADC1->CTLR2 |= ADC_RSTCAL;
     73a:	0087e793          	ori	a5,a5,8
     73e:	40f42423          	sw	a5,1032(s0)
  while (ADC1->CTLR2 & ADC_RSTCAL)
     742:	4086a703          	lw	a4,1032(a3) # 40012408 <_eusrstack+0x20011c08>
     746:	8b21                	andi	a4,a4,8
     748:	ff6d                	bnez	a4,742 <main+0xa0>
  ADC1->CTLR2 |= ADC_CAL;
     74a:	4086a703          	lw	a4,1032(a3)
     74e:	00476713          	ori	a4,a4,4
     752:	40e6a423          	sw	a4,1032(a3)
  while (ADC1->CTLR2 & ADC_CAL)
     756:	40012737          	lui	a4,0x40012
     75a:	40872783          	lw	a5,1032(a4) # 40012408 <_eusrstack+0x20011c08>
     75e:	8b91                	andi	a5,a5,4
     760:	ffed                	bnez	a5,75a <main+0xb8>
  printf("Calibrating done...\r\n");
     762:	6505                	lui	a0,0x1
     764:	f0450513          	addi	a0,a0,-252 # f04 <TIM1_UP_IRQHandler+0x178>
     768:	3be5                	jal	560 <puts>
  printf("Initializing timer...\r\n");
     76a:	6505                	lui	a0,0x1
     76c:	f1c50513          	addi	a0,a0,-228 # f1c <TIM1_UP_IRQHandler+0x190>
     770:	3bc5                	jal	560 <puts>
  RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
     772:	400216b7          	lui	a3,0x40021
     776:	4e9c                	lw	a5,24(a3)
     778:	6705                	lui	a4,0x1
     77a:	80070713          	addi	a4,a4,-2048 # 800 <main+0x15e>
     77e:	8fd9                	or	a5,a5,a4
     780:	ce9c                	sw	a5,24(a3)
  TIM1->CTLR1 |= TIM_CounterMode_Up | TIM_CKD_DIV1;
     782:	40013737          	lui	a4,0x40013
     786:	c0075683          	lhu	a3,-1024(a4) # 40012c00 <_eusrstack+0x20012400>
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     78a:	4621                	li	a2,8
     78c:	06c2                	slli	a3,a3,0x10
     78e:	82c1                	srli	a3,a3,0x10
     790:	c0d71023          	sh	a3,-1024(a4)
  TIM1->CTLR2 = TIM_MMS_1;
     794:	02000693          	li	a3,32
     798:	c0d71223          	sh	a3,-1020(a4)
  TIM1->ATRLR = 80; // lower = higher sample rate. 800 for 6400sam/sec
     79c:	05000693          	li	a3,80
     7a0:	c2d71623          	sh	a3,-980(a4)
  TIM1->PSC = 10 - 1;
     7a4:	46a5                	li	a3,9
     7a6:	c2d71423          	sh	a3,-984(a4)
  TIM1->RPTCR = 0;
     7aa:	c2071823          	sh	zero,-976(a4)
  TIM1->SWEVGR = TIM_PSCReloadMode_Immediate;
     7ae:	4685                	li	a3,1
     7b0:	c0d71a23          	sh	a3,-1004(a4)
     7b4:	e000e6b7          	lui	a3,0xe000e
     7b8:	10c6a223          	sw	a2,260(a3) # e000e104 <_eusrstack+0xc000d904>
  TIM1->INTFR = ~TIM_FLAG_Update;
     7bc:	56f9                	li	a3,-2
     7be:	c0d71823          	sh	a3,-1008(a4)
  TIM1->DMAINTENR |= TIM_IT_Update;
     7c2:	c0c75683          	lhu	a3,-1012(a4)

  int e, k = 10, i, n, lastcount = 0;
  int d, dist, bestdist, best, c;

  for (i = 0; i < MEL; i++)
    nfloor[i] = 192; // high initial noise floor
     7c6:	4651                	li	a2,20
     7c8:	0c000593          	li	a1,192
  TIM1->DMAINTENR |= TIM_IT_Update;
     7cc:	06c2                	slli	a3,a3,0x10
     7ce:	82c1                	srli	a3,a3,0x10
     7d0:	0016e693          	ori	a3,a3,1
     7d4:	c0d71623          	sh	a3,-1012(a4)
  TIM1->CTLR1 |= TIM_CEN;
     7d8:	c0075783          	lhu	a5,-1024(a4)
    nfloor[i] = 192; // high initial noise floor
     7dc:	f9018513          	addi	a0,gp,-112 # 2000038c <nfloor>
  TIM1->CTLR1 |= TIM_CEN;
     7e0:	07c2                	slli	a5,a5,0x10
     7e2:	83c1                	srli	a5,a5,0x10
     7e4:	0017e793          	ori	a5,a5,1
     7e8:	c0f71023          	sh	a5,-1024(a4)
    nfloor[i] = 192; // high initial noise floor
     7ec:	338d                	jal	54e <memset>
  int e, k = 10, i, n, lastcount = 0;
     7ee:	4701                	li	a4,0

  while (1) {
    while (count != 0 && lastcount == count)
     7f0:	c041a783          	lw	a5,-1020(gp) # 20000000 <count>
     7f4:	c399                	beqz	a5,7fa <main+0x158>
     7f6:	fee78de3          	beq	a5,a4,7f0 <main+0x14e>
      k++; // wait till 10ms of samples read....
    if (count - lastcount != 1)
     7fa:	17fd                	addi	a5,a5,-1
     7fc:	00e78663          	beq	a5,a4,808 <main+0x166>
      printf("oops framecount\n");
     800:	6505                	lui	a0,0x1
     802:	f3450513          	addi	a0,a0,-204 # f34 <TIM1_UP_IRQHandler+0x1a8>
     806:	3ba9                	jal	560 <puts>
    lock = 1;
    // lock=0;  // ignore locking for now when doing trace stuff.

    for (i = FFT - 1, n = FFT - 2; i != 0; i--, n--)
     808:	fa418793          	addi	a5,gp,-92 # 200003a0 <re>
     80c:	fa418693          	addi	a3,gp,-92 # 200003a0 <re>
     810:	fa418713          	addi	a4,gp,-92 # 200003a0 <re>
     814:	1fc78793          	addi	a5,a5,508 # e01fc <stt.c.5fff5958+0xdddb7>
     818:	c43a                	sw	a4,8(sp)
      re[i] = re[i] - re[n];  //去除直流分量（DC Level）
     81a:	4398                	lw	a4,0(a5)
     81c:	ffc7a603          	lw	a2,-4(a5)
    for (i = FFT - 1, n = FFT - 2; i != 0; i--, n--)
     820:	17f1                	addi	a5,a5,-4
      re[i] = re[i] - re[n];  //去除直流分量（DC Level）
     822:	8f11                	sub	a4,a4,a2
     824:	c3d8                	sw	a4,4(a5)
    for (i = FFT - 1, n = FFT - 2; i != 0; i--, n--)
     826:	fef69ae3          	bne	a3,a5,81a <main+0x178>
    re[0] = 0; // 1.0 pre-emph?
     82a:	4722                	lw	a4,8(sp)
    for (i = FFT - 1, n = FFT - 2; i != 0; i--, n--)
     82c:	84be                	mv	s1,a5

    for (i = 0; i < FFT; i++){
     82e:	4401                	li	s0,0
    re[0] = 0; // 1.0 pre-emph?
     830:	00072023          	sw	zero,0(a4)
      // re[i] <<= 8; // scale for the FFT
      re[i] <<= 3;
      re[i] = window[i] * re[i]; // Apply LPCNet-style window function
     834:	6709                	lui	a4,0x2
     836:	12870713          	addi	a4,a4,296 # 2128 <window>
     83a:	00870633          	add	a2,a4,s0
      re[i] <<= 3;
     83e:	4088                	lw	a0,0(s1)
      re[i] = window[i] * re[i]; // Apply LPCNet-style window function
     840:	00060583          	lb	a1,0(a2)
     844:	c23e                	sw	a5,4(sp)
     846:	050e                	slli	a0,a0,0x3
     848:	859ff0ef          	jal	ra,a0 <__mulsi3>
    for (i = 0; i < FFT; i++){
     84c:	6789                	lui	a5,0x2
      re[i] = window[i] * re[i]; // Apply LPCNet-style window function
     84e:	c088                	sw	a0,0(s1)
    for (i = 0; i < FFT; i++){
     850:	0405                	addi	s0,s0,1
     852:	08000693          	li	a3,128
     856:	12878713          	addi	a4,a5,296 # 2128 <window>
     85a:	0491                	addi	s1,s1,4
     85c:	4792                	lw	a5,4(sp)
     85e:	fcd41ee3          	bne	s0,a3,83a <main+0x198>
      temp = im[even] + im[odd];
     862:	d4018713          	addi	a4,gp,-704 # 2000013c <im>
     866:	c63a                	sw	a4,12(sp)
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     868:	6709                	lui	a4,0x2
     86a:	02870713          	addi	a4,a4,40 # 2028 <tr>
     86e:	d03a                	sw	a4,32(sp)
     870:	6709                	lui	a4,0x2
     872:	f2870713          	addi	a4,a4,-216 # 1f28 <ti>
  log = 0;
     876:	c202                	sw	zero,4(sp)
  for (span = size >> 1; span; span >>= 1, log++) {
     878:	04000613          	li	a2,64
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     87c:	d23a                	sw	a4,36(sp)
     87e:	fff64693          	not	a3,a2
    for (i = 0; i < FFT; i++){
     882:	8732                	mv	a4,a2
     884:	ce36                	sw	a3,28(sp)
      odd |= span;       // iterate over odd blocks only
     886:	00c766b3          	or	a3,a4,a2
     88a:	c836                	sw	a3,16(sp)
     88c:	46f2                	lw	a3,28(sp)
      temp = re[even] + re[odd];
     88e:	4422                	lw	s0,8(sp)
     890:	8f75                	and	a4,a4,a3
     892:	46a2                	lw	a3,8(sp)
     894:	00271593          	slli	a1,a4,0x2
     898:	00b682b3          	add	t0,a3,a1
     89c:	46c2                	lw	a3,16(sp)
     89e:	0002a503          	lw	a0,0(t0)
     8a2:	068a                	slli	a3,a3,0x2
     8a4:	00d40333          	add	t1,s0,a3
     8a8:	00032383          	lw	t2,0(t1)
      re[odd] = re[even] - re[odd];
     8ac:	40750433          	sub	s0,a0,t2
     8b0:	00832023          	sw	s0,0(t1)
      temp = re[even] + re[odd];
     8b4:	951e                	add	a0,a0,t2
      re[even] = temp;
     8b6:	00a2a023          	sw	a0,0(t0)
      temp = im[even] + im[odd];
     8ba:	4432                	lw	s0,12(sp)
     8bc:	4532                	lw	a0,12(sp)
     8be:	96a2                	add	a3,a3,s0
     8c0:	95aa                	add	a1,a1,a0
     8c2:	4188                	lw	a0,0(a1)
     8c4:	0006a283          	lw	t0,0(a3)
      im[odd] = im[even] - im[odd];
     8c8:	405503b3          	sub	t2,a0,t0
     8cc:	0076a023          	sw	t2,0(a3)
      temp = im[even] + im[odd];
     8d0:	9516                	add	a0,a0,t0
      im[even] = temp;
     8d2:	c188                	sw	a0,0(a1)
      rootindex = (even << log) & (size - 1); // find root of unity index
     8d4:	4592                	lw	a1,4(sp)
     8d6:	00b71733          	sll	a4,a4,a1
     8da:	07f77713          	andi	a4,a4,127
      if (rootindex) // skip rootindex[0] (has an identity)
     8de:	cb51                	beqz	a4,972 <main+0x2d0>
     8e0:	de3e                	sw	a5,60(sp)
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     8e2:	5782                	lw	a5,32(sp)
     8e4:	070a                	slli	a4,a4,0x2
     8e6:	0006a283          	lw	t0,0(a3)
     8ea:	00e785b3          	add	a1,a5,a4
     8ee:	5792                	lw	a5,36(sp)
     8f0:	0005a383          	lw	t2,0(a1)
        im[odd] = im[odd] * tr[rootindex] / RES - re[odd] * ti[rootindex] / RES;
     8f4:	8596                	mv	a1,t0
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     8f6:	973e                	add	a4,a4,a5
     8f8:	431c                	lw	a5,0(a4)
        im[odd] = im[odd] * tr[rootindex] / RES - re[odd] * ti[rootindex] / RES;
     8fa:	851e                	mv	a0,t2
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     8fc:	00032483          	lw	s1,0(t1)
     900:	c0b2                	sw	a2,64(sp)
     902:	dc1a                	sw	t1,56(sp)
     904:	ca3e                	sw	a5,20(sp)
        im[odd] = im[odd] * tr[rootindex] / RES - re[odd] * ti[rootindex] / RES;
     906:	d816                	sw	t0,48(sp)
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     908:	da36                	sw	a3,52(sp)
        im[odd] = im[odd] * tr[rootindex] / RES - re[odd] * ti[rootindex] / RES;
     90a:	d61e                	sw	t2,44(sp)
     90c:	f94ff0ef          	jal	ra,a0 <__mulsi3>
     910:	6589                	lui	a1,0x2
     912:	fff58413          	addi	s0,a1,-1 # 1fff <ti+0xd7>
     916:	41f55713          	srai	a4,a0,0x1f
     91a:	45d2                	lw	a1,20(sp)
     91c:	8f61                	and	a4,a4,s0
     91e:	972a                	add	a4,a4,a0
     920:	8735                	srai	a4,a4,0xd
     922:	8526                	mv	a0,s1
     924:	d43a                	sw	a4,40(sp)
     926:	f7aff0ef          	jal	ra,a0 <__mulsi3>
     92a:	41f55593          	srai	a1,a0,0x1f
     92e:	5722                	lw	a4,40(sp)
     930:	8de1                	and	a1,a1,s0
     932:	56d2                	lw	a3,52(sp)
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     934:	53b2                	lw	t2,44(sp)
        im[odd] = im[odd] * tr[rootindex] / RES - re[odd] * ti[rootindex] / RES;
     936:	952e                	add	a0,a0,a1
     938:	8535                	srai	a0,a0,0xd
     93a:	40a70533          	sub	a0,a4,a0
     93e:	c288                	sw	a0,0(a3)
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     940:	859e                	mv	a1,t2
     942:	8526                	mv	a0,s1
     944:	f5cff0ef          	jal	ra,a0 <__mulsi3>
     948:	52c2                	lw	t0,48(sp)
     94a:	41f55493          	srai	s1,a0,0x1f
     94e:	45d2                	lw	a1,20(sp)
     950:	8ce1                	and	s1,s1,s0
     952:	94aa                	add	s1,s1,a0
     954:	8516                	mv	a0,t0
     956:	f4aff0ef          	jal	ra,a0 <__mulsi3>
     95a:	41f55713          	srai	a4,a0,0x1f
     95e:	8f61                	and	a4,a4,s0
        re[odd] = temp;
     960:	5362                	lw	t1,56(sp)
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     962:	953a                	add	a0,a0,a4
     964:	84b5                	srai	s1,s1,0xd
     966:	8535                	srai	a0,a0,0xd
        re[odd] = temp;
     968:	4606                	lw	a2,64(sp)
     96a:	57f2                	lw	a5,60(sp)
        temp = re[odd] * tr[rootindex] / RES + im[odd] * ti[rootindex] / RES;
     96c:	9526                	add	a0,a0,s1
        re[odd] = temp;
     96e:	00a32023          	sw	a0,0(t1)
    for (odd = span; odd < size; odd++) // iterate over the dual nodes
     972:	4742                	lw	a4,16(sp)
     974:	08000693          	li	a3,128
     978:	0705                	addi	a4,a4,1
     97a:	f0d716e3          	bne	a4,a3,886 <main+0x1e4>
  for (span = size >> 1; span; span >>= 1, log++) {
     97e:	4712                	lw	a4,4(sp)
     980:	8205                	srli	a2,a2,0x1
     982:	0705                	addi	a4,a4,1
     984:	c23a                	sw	a4,4(sp)
     986:	4692                	lw	a3,4(sp)
     988:	471d                	li	a4,7
     98a:	eee69ae3          	bne	a3,a4,87e <main+0x1dc>
     98e:	4491                	li	s1,4
    }
    simple_int_fft(FFT);
    for (i = 1; i < FFT; i += 2) { 
      //对于实信号的 FFT 结果，频谱是对称的，此处通过i += 2只处理单侧有效频谱（减少一半计算量，适配低算力）
      re[i] = (re[i] * re[i] + im[i] * im[i]); //计算频域复数的模平方（即该频率点的功率）
     990:	4732                	lw	a4,12(sp)
     992:	43cc                	lw	a1,4(a5)
     994:	c23e                	sw	a5,4(sp)
     996:	009706b3          	add	a3,a4,s1
     99a:	4294                	lw	a3,0(a3)
     99c:	852e                	mv	a0,a1
    for (i = 1; i < FFT; i += 2) { 
     99e:	04a1                	addi	s1,s1,8
      re[i] = (re[i] * re[i] + im[i] * im[i]); //计算频域复数的模平方（即该频率点的功率）
     9a0:	c836                	sw	a3,16(sp)
     9a2:	efeff0ef          	jal	ra,a0 <__mulsi3>
     9a6:	46c2                	lw	a3,16(sp)
     9a8:	842a                	mv	s0,a0
     9aa:	85b6                	mv	a1,a3
     9ac:	8536                	mv	a0,a3
     9ae:	ef2ff0ef          	jal	ra,a0 <__mulsi3>
      re[i] >>= 8;
     9b2:	4792                	lw	a5,4(sp)
      re[i] = (re[i] * re[i] + im[i] * im[i]); //计算频域复数的模平方（即该频率点的功率）
     9b4:	942a                	add	s0,s0,a0
      re[i] >>= 8;
     9b6:	8421                	srai	s0,s0,0x8
     9b8:	c3c0                	sw	s0,4(a5)
    for (i = 1; i < FFT; i += 2) { 
     9ba:	20400713          	li	a4,516
     9be:	07a1                	addi	a5,a5,8
     9c0:	fce498e3          	bne	s1,a4,990 <main+0x2ee>
    }
    // for (i=1; i<FFT; i+=2) if (re[i]>(1<<23)) printf("oops!\n");

    for (i = 0; i < MEL; i++)
      mel[i] = 0;
     9c4:	05000613          	li	a2,80
     9c8:	4581                	li	a1,0
     9ca:	f4018513          	addi	a0,gp,-192 # 2000033c <mel>
     9ce:	3641                	jal	54e <memset>
    i = 0; //i：遍历mel_mx数组的索引，每次处理一个（索引，权重）对或分隔符 0。
    n = 0; //n：当前正在计算的梅尔 bin 索引（0 到 19，共 20 个）。
    while (n != MEL) {
      if (mel_mx[i] == 0) {
     9d0:	6709                	lui	a4,0x2
    n = 0; //n：当前正在计算的梅尔 bin 索引（0 到 19，共 20 个）。
     9d2:	4781                	li	a5,0
    i = 0; //i：遍历mel_mx数组的索引，每次处理一个（索引，权重）对或分隔符 0。
     9d4:	4481                	li	s1,0
      if (mel_mx[i] == 0) {
     9d6:	b2870713          	addi	a4,a4,-1240 # 1b28 <mel_mx>
        // i++：跳过 0 这个分隔符，移动到下一个梅尔 bin 的（索引，权重）对起始位置。
        // n++：切换到下一个梅尔 bin 的计算（如从mel[0]切换到mel[1]）。
        i++;
        n++;
      } else {
        mel[n] += (unsigned int)re[mel_mx[i]] * mel_mx[i + 1]; 
     9da:	f4018313          	addi	t1,gp,-192 # 2000033c <mel>
    while (n != MEL) {
     9de:	4651                	li	a2,20
      if (mel_mx[i] == 0) {
     9e0:	00249693          	slli	a3,s1,0x2
     9e4:	96ba                	add	a3,a3,a4
     9e6:	4288                	lw	a0,0(a3)
        i++;
     9e8:	00148593          	addi	a1,s1,1
      if (mel_mx[i] == 0) {
     9ec:	22051b63          	bnez	a0,c22 <main+0x580>
        n++;
     9f0:	0785                	addi	a5,a5,1
        i++;
     9f2:	84ae                	mv	s1,a1
    while (n != MEL) {
     9f4:	fec796e3          	bne	a5,a2,9e0 <main+0x33e>
     9f8:	f4018613          	addi	a2,gp,-192 # 2000033c <mel>
     9fc:	f4018793          	addi	a5,gp,-192 # 2000033c <mel>
    return (first[a]);
     a00:	6509                	lui	a0,0x2
    while (n != MEL) {
     a02:	f4018713          	addi	a4,gp,-192 # 2000033c <mel>
     a06:	05060593          	addi	a1,a2,80
     a0a:	c23e                	sw	a5,4(sp)
  if (a > 8) {
     a0c:	4321                	li	t1,8
    return (first[a]);
     a0e:	b0450513          	addi	a0,a0,-1276 # 1b04 <first>
    if ((a & b) == 0)
     a12:	72c1                	lui	t0,0xffff0
    b >>= r;
     a14:	ff0003b7          	lui	t2,0xff000
    b >>= r;
     a18:	f0000437          	lui	s0,0xf0000
    b >>= r;
     a1c:	c00004b7          	lui	s1,0xc0000
        i += 2;
      }
    }

    for (i = 0; i < MEL; i++)
      mel[i] = intlog2_8bit(mel[i]);
     a20:	4314                	lw	a3,0(a4)
  if (a > 8) {
     a22:	22d37b63          	bgeu	t1,a3,c58 <main+0x5b6>
    if ((a & b) == 0)
     a26:	0056f7b3          	and	a5,a3,t0
      r = 0;
     a2a:	0017b793          	seqz	a5,a5
     a2e:	0792                	slli	a5,a5,0x4
    b >>= r;
     a30:	00f3d0b3          	srl	ra,t2,a5
    if ((a & b) == 0)
     a34:	00d0f0b3          	and	ra,ra,a3
     a38:	00009363          	bnez	ra,a3e <main+0x39c>
      r += 8;
     a3c:	07a1                	addi	a5,a5,8
    b >>= r;
     a3e:	00f450b3          	srl	ra,s0,a5
    if ((a & b) == 0)
     a42:	00d0f0b3          	and	ra,ra,a3
     a46:	00009363          	bnez	ra,a4c <main+0x3aa>
      r += 4;
     a4a:	0791                	addi	a5,a5,4
    b >>= r;
     a4c:	00f4d0b3          	srl	ra,s1,a5
    if ((a & b) == 0)
     a50:	00d0f0b3          	and	ra,ra,a3
     a54:	00009363          	bnez	ra,a5a <main+0x3b8>
      r += 2;
     a58:	0789                	addi	a5,a5,2
    b >>= r;
     a5a:	800000b7          	lui	ra,0x80000
     a5e:	00f0d0b3          	srl	ra,ra,a5
    if ((a & b) == 0)
     a62:	00d0f0b3          	and	ra,ra,a3
     a66:	00009363          	bnez	ra,a6c <main+0x3ca>
      r += 1;
     a6a:	0785                	addi	a5,a5,1
    a >>= (l - 3);
     a6c:	40f1                	li	ra,28
     a6e:	40f080b3          	sub	ra,ra,a5
     a72:	0016d6b3          	srl	a3,a3,ra
    l = 31 - r;
     a76:	40fd                	li	ra,31
     a78:	40f080b3          	sub	ra,ra,a5
    result += a - 8;
     a7c:	16e1                	addi	a3,a3,-8
    result = l * 8;
     a7e:	008e                	slli	ra,ra,0x3
    result += a - 8;
     a80:	9686                	add	a3,a3,ra
      mel[i] = intlog2_8bit(mel[i]);
     a82:	c314                	sw	a3,0(a4)
    for (i = 0; i < MEL; i++)
     a84:	0711                	addi	a4,a4,4
     a86:	f8e59de3          	bne	a1,a4,a20 <main+0x37e>

    // remove noise floor and adjust it?....
    if (e < TOL_OFF){ //当信号能量低（接近静音）时, 动态更新噪声底（nfloor）并从梅尔值中去除
     a8a:	4682                	lw	a3,0(sp)
     a8c:	09500793          	li	a5,149
     a90:	f9018313          	addi	t1,gp,-112 # 2000038c <nfloor>
     a94:	1cd7cf63          	blt	a5,a3,c72 <main+0x5d0>
     a98:	f9018713          	addi	a4,gp,-112 # 2000038c <nfloor>
     a9c:	86b2                	mv	a3,a2
      for (i = 0; i < MEL; i++) {
        mel[i] -= nfloor[i];  // 减去当前噪声底
        // 动态调整噪声底：若梅尔值为正，噪声底缓慢升高；若为负，噪声底缓慢降低
        if (mel[i] > 0 && nfloor[i] < 255)
     a9e:	0ff00313          	li	t1,255
        mel[i] -= nfloor[i];  // 减去当前噪声底
     aa2:	4288                	lw	a0,0(a3)
     aa4:	00074783          	lbu	a5,0(a4)
     aa8:	8d1d                	sub	a0,a0,a5
     aaa:	c288                	sw	a0,0(a3)
        if (mel[i] > 0 && nfloor[i] < 255)
     aac:	1aa05a63          	blez	a0,c60 <main+0x5be>
     ab0:	00678563          	beq	a5,t1,aba <main+0x418>
          nfloor[i]++;
     ab4:	0785                	addi	a5,a5,1
     ab6:	00f70023          	sb	a5,0(a4)
      for (i = 0; i < MEL; i++) {
     aba:	0691                	addi	a3,a3,4
     abc:	0705                	addi	a4,a4,1
     abe:	fed592e3          	bne	a1,a3,aa2 <main+0x400>
          mel[i] = 0;
      }
    }

    // calculate energy seperate from mdct (just sum-of-mels)
    e = 0;
     ac2:	c002                	sw	zero,0(sp)
    for (i = 0; i < MEL; i++)
      e += mel[i];
     ac4:	421c                	lw	a5,0(a2)
     ac6:	4702                	lw	a4,0(sp)
    for (i = 0; i < MEL; i++)
     ac8:	0611                	addi	a2,a2,4
      e += mel[i];
     aca:	97ba                	add	a5,a5,a4
     acc:	c03e                	sw	a5,0(sp)
    for (i = 0; i < MEL; i++)
     ace:	fec59be3          	bne	a1,a2,ac4 <main+0x422>
    // printf("e=%d\n",e);

    for (n = 0; n < CEPS; n++) { //通过矩阵乘法将 20 维梅尔特征（mel）与dctm_8bit相乘，得到 8 维倒谱系数（cep）
      cep[n] = 0;
     ad2:	02000613          	li	a2,32
     ad6:	d2018513          	addi	a0,gp,-736 # 2000011c <cep>
     ada:	4581                	li	a1,0
     adc:	3c8d                	jal	54e <memset>
     ade:	6489                	lui	s1,0x2
     ae0:	d2018693          	addi	a3,gp,-736 # 2000011c <cep>
     ae4:	88448493          	addi	s1,s1,-1916 # 1884 <dctm_8bit>
     ae8:	4601                	li	a2,0
     aea:	d2018413          	addi	s0,gp,-736 # 2000011c <cep>
     aee:	4701                	li	a4,0
     af0:	4781                	li	a5,0
     af2:	c63e                	sw	a5,12(sp)
      for (i = 0; i < MEL; i++)
        cep[n] += mel[i] * dctm_8bit[n * MEL + i];
     af4:	4792                	lw	a5,4(sp)
     af6:	00e485b3          	add	a1,s1,a4
     afa:	418c                	lw	a1,0(a1)
     afc:	00e78533          	add	a0,a5,a4
     b00:	4108                	lw	a0,0(a0)
     b02:	ca36                	sw	a3,20(sp)
     b04:	c832                	sw	a2,16(sp)
     b06:	c43a                	sw	a4,8(sp)
     b08:	d98ff0ef          	jal	ra,a0 <__mulsi3>
      for (i = 0; i < MEL; i++)
     b0c:	4722                	lw	a4,8(sp)
        cep[n] += mel[i] * dctm_8bit[n * MEL + i];
     b0e:	47b2                	lw	a5,12(sp)
      for (i = 0; i < MEL; i++)
     b10:	05000293          	li	t0,80
     b14:	0711                	addi	a4,a4,4
     b16:	4642                	lw	a2,16(sp)
     b18:	46d2                	lw	a3,20(sp)
        cep[n] += mel[i] * dctm_8bit[n * MEL + i];
     b1a:	97aa                	add	a5,a5,a0
      for (i = 0; i < MEL; i++)
     b1c:	0a000313          	li	t1,160
     b20:	fc5719e3          	bne	a4,t0,af2 <main+0x450>
      cep[n] >>= 9; // only enough memory for buffering 8-bit ceps
     b24:	87a5                	srai	a5,a5,0x9
     b26:	c01c                	sw	a5,0(s0)
    for (n = 0; n < CEPS; n++) { //通过矩阵乘法将 20 维梅尔特征（mel）与dctm_8bit相乘，得到 8 维倒谱系数（cep）
     b28:	0651                	addi	a2,a2,20
     b2a:	0411                	addi	s0,s0,4
     b2c:	05048493          	addi	s1,s1,80
     b30:	fa661fe3          	bne	a2,t1,aee <main+0x44c>
    }

    if (e > TOL_ON) { // capture (another) audio frame...
     b34:	4602                	lw	a2,0(sp)
     b36:	12c00793          	li	a5,300
      wsize++;
      silcount = 0;
    }
    if (e < TOL_OFF)
      silcount++; // silent frame, end of sample?
    if (silcount >= 20 && wsize < MINSIZE) {
     b3a:	c1c18703          	lb	a4,-996(gp) # 20000018 <wsize>
     b3e:	c1c18413          	addi	s0,gp,-996 # 20000018 <wsize>
    if (e > TOL_ON) { // capture (another) audio frame...
     b42:	14c7dd63          	bge	a5,a2,c9c <main+0x5fa>
        word[wsize * CEPS + i] = (int8_t)cep[i];
     b46:	00371313          	slli	t1,a4,0x3
      for (i = 0; i < CEPS; i++)
     b4a:	4781                	li	a5,0
        word[wsize * CEPS + i] = (int8_t)cep[i];
     b4c:	1a418593          	addi	a1,gp,420 # 200005a0 <word>
      for (i = 0; i < CEPS; i++)
     b50:	4521                	li	a0,8
        word[wsize * CEPS + i] = (int8_t)cep[i];
     b52:	0006a283          	lw	t0,0(a3)
     b56:	00678633          	add	a2,a5,t1
     b5a:	962e                	add	a2,a2,a1
     b5c:	00560023          	sb	t0,0(a2)
      for (i = 0; i < CEPS; i++)
     b60:	0785                	addi	a5,a5,1
     b62:	0691                	addi	a3,a3,4
     b64:	fea797e3          	bne	a5,a0,b52 <main+0x4b0>
      wsize++;
     b68:	0705                	addi	a4,a4,1
     b6a:	00e40023          	sb	a4,0(s0) # f0000000 <_eusrstack+0xcffff800>
      silcount = 0;
     b6e:	c001aa23          	sw	zero,-1004(gp) # 20000010 <silcount>
      silcount = 0;
      wsize = 0;
    }
    lock = 0;

    if (wsize == WSIZE || (silcount >= 15 && wsize >= MINSIZE)) {
     b72:	00040483          	lb	s1,0(s0)
    lock = 0;
     b76:	c001a423          	sw	zero,-1016(gp) # 20000004 <lock>
    if (wsize == WSIZE || (silcount >= 15 && wsize >= MINSIZE)) {
     b7a:	02000793          	li	a5,32
     b7e:	18f48b63          	beq	s1,a5,d14 <main+0x672>
     b82:	c141a703          	lw	a4,-1004(gp) # 20000010 <silcount>
     b86:	47b9                	li	a5,14
     b88:	08e7d963          	bge	a5,a4,c1a <main+0x578>
     b8c:	479d                	li	a5,7
     b8e:	0897d663          	bge	a5,s1,c1a <main+0x578>
      // warp sample size to exactly 16 frames....
      if (wsize < 16) {
     b92:	47bd                	li	a5,15
     b94:	1297ca63          	blt	a5,s1,cc8 <main+0x626>
     b98:	00449713          	slli	a4,s1,0x4
     b9c:	8f05                	sub	a4,a4,s1
     b9e:	07800693          	li	a3,120
     ba2:	1a418593          	addi	a1,gp,420 # 200005a0 <word>
        for (i = 15; i >= 0; i--) {
          k = i * wsize / 16;
          for (n = 0; n < CEPS; n++)
     ba6:	43a1                	li	t2,8
        for (i = 15; i >= 0; i--) {
     ba8:	52e1                	li	t0,-8
          k = i * wsize / 16;
     baa:	41f75793          	srai	a5,a4,0x1f
     bae:	8bbd                	andi	a5,a5,15
     bb0:	97ba                	add	a5,a5,a4
     bb2:	8791                	srai	a5,a5,0x4
            word[i * CEPS + n] = word[k * CEPS + n];
     bb4:	078e                	slli	a5,a5,0x3
     bb6:	00f58633          	add	a2,a1,a5
          for (n = 0; n < CEPS; n++)
     bba:	4501                	li	a0,0
            word[i * CEPS + n] = word[k * CEPS + n];
     bbc:	00060083          	lb	ra,0(a2)
     bc0:	40f60333          	sub	t1,a2,a5
     bc4:	9336                	add	t1,t1,a3
     bc6:	00130023          	sb	ra,0(t1)
          for (n = 0; n < CEPS; n++)
     bca:	0505                	addi	a0,a0,1
     bcc:	0605                	addi	a2,a2,1
     bce:	fe7517e3          	bne	a0,t2,bbc <main+0x51a>
        for (i = 15; i >= 0; i--) {
     bd2:	16e1                	addi	a3,a3,-8
     bd4:	8f05                	sub	a4,a4,s1
     bd6:	fc569ae3          	bne	a3,t0,baa <main+0x508>
      wsize = 16; // standardized now!

      // search codebook for best match and print it!
      bestdist = 999999999;
      c = 0;
      while (cb[c] != -1) {
     bda:	6705                	lui	a4,0x1
     bdc:	f7070393          	addi	t2,a4,-144 # f70 <cb>
      wsize = 16; // standardized now!
     be0:	47c1                	li	a5,16
      bestdist = 999999999;
     be2:	3b9ad637          	lui	a2,0x3b9ad
        k = cb[c];
        c++;
        dist = 0; // printf("k=%d\n",k);
        for (i = 0; i < 16; i++) {
          for (n = 0; n < CEPS; n++, c++) {
            d = word[i * CEPS + n] - cb[c];
     be6:	1a418713          	addi	a4,gp,420 # 200005a0 <word>
      wsize = 16; // standardized now!
     bea:	00f40023          	sb	a5,0(s0)
      bestdist = 999999999;
     bee:	9ff60613          	addi	a2,a2,-1537 # 3b9ac9ff <_eusrstack+0x1b9ac1ff>
      c = 0;
     bf2:	4781                	li	a5,0
            d = word[i * CEPS + n] - cb[c];
     bf4:	c63a                	sw	a4,12(sp)
      while (cb[c] != -1) {
     bf6:	00778733          	add	a4,a5,t2
     bfa:	00070283          	lb	t0,0(a4)
     bfe:	577d                	li	a4,-1
     c00:	10e29c63          	bne	t0,a4,d18 <main+0x676>
        if (dist < bestdist) {
          bestdist = dist;
          best = k;
        }
      }
      printf("best match = %d, bestdist=%d\n", best, bestdist);
     c04:	45e2                	lw	a1,24(sp)
     c06:	6505                	lui	a0,0x1
     c08:	f4450513          	addi	a0,a0,-188 # f44 <TIM1_UP_IRQHandler+0x1b8>
     c0c:	3a31                	jal	528 <printf>
      wsize = 0;
      silcount = 0;
     c0e:	c001aa23          	sw	zero,-1004(gp) # 20000010 <silcount>
      wsize = 0;
     c12:	00040023          	sb	zero,0(s0)
      posn = 0;
     c16:	c001a623          	sw	zero,-1012(gp) # 20000008 <posn>
    }
    lastcount = count;
     c1a:	c0418793          	addi	a5,gp,-1020 # 20000000 <count>
     c1e:	4398                	lw	a4,0(a5)
  while (1) {
     c20:	bec1                	j	7f0 <main+0x14e>
        mel[n] += (unsigned int)re[mel_mx[i]] * mel_mx[i + 1]; 
     c22:	00279693          	slli	a3,a5,0x2
     c26:	c63e                	sw	a5,12(sp)
     c28:	47a2                	lw	a5,8(sp)
     c2a:	050a                	slli	a0,a0,0x2
     c2c:	058a                	slli	a1,a1,0x2
     c2e:	953e                	add	a0,a0,a5
     c30:	95ba                	add	a1,a1,a4
     c32:	418c                	lw	a1,0(a1)
     c34:	4108                	lw	a0,0(a0)
     c36:	969a                	add	a3,a3,t1
     c38:	c236                	sw	a3,4(sp)
     c3a:	c66ff0ef          	jal	ra,a0 <__mulsi3>
     c3e:	4692                	lw	a3,4(sp)
        i += 2;
     c40:	f4018313          	addi	t1,gp,-192 # 2000033c <mel>
        mel[n] += (unsigned int)re[mel_mx[i]] * mel_mx[i + 1]; 
     c44:	428c                	lw	a1,0(a3)
        i += 2;
     c46:	6709                	lui	a4,0x2
     c48:	47b2                	lw	a5,12(sp)
        mel[n] += (unsigned int)re[mel_mx[i]] * mel_mx[i + 1]; 
     c4a:	952e                	add	a0,a0,a1
     c4c:	c288                	sw	a0,0(a3)
        i += 2;
     c4e:	0489                	addi	s1,s1,2
     c50:	4651                	li	a2,20
     c52:	b2870713          	addi	a4,a4,-1240 # 1b28 <mel_mx>
     c56:	bb79                	j	9f4 <main+0x352>
    return (first[a]);
     c58:	068a                	slli	a3,a3,0x2
     c5a:	96aa                	add	a3,a3,a0
     c5c:	4294                	lw	a3,0(a3)
     c5e:	b515                	j	a82 <main+0x3e0>
        if (mel[i] < 0 && nfloor[i] > 0)
     c60:	e4050de3          	beqz	a0,aba <main+0x418>
     c64:	c781                	beqz	a5,c6c <main+0x5ca>
          nfloor[i]--;
     c66:	17fd                	addi	a5,a5,-1
     c68:	00f70023          	sb	a5,0(a4)
          mel[i] = 0;
     c6c:	0006a023          	sw	zero,0(a3)
     c70:	b5a9                	j	aba <main+0x418>
    if (e < TOL_OFF){ //当信号能量低（接近静音）时, 动态更新噪声底（nfloor）并从梅尔值中去除
     c72:	87b2                	mv	a5,a2
      for (i = 0; i < MEL; i++) { // just remove noise floor....
     c74:	4701                	li	a4,0
     c76:	4551                	li	a0,20
        mel[i] -= nfloor[i];
     c78:	00e306b3          	add	a3,t1,a4
     c7c:	0006c283          	lbu	t0,0(a3)
     c80:	4394                	lw	a3,0(a5)
     c82:	405686b3          	sub	a3,a3,t0
        if (mel[i] < 0)
     c86:	0006c863          	bltz	a3,c96 <main+0x5f4>
        mel[i] -= nfloor[i];
     c8a:	c394                	sw	a3,0(a5)
      for (i = 0; i < MEL; i++) { // just remove noise floor....
     c8c:	0705                	addi	a4,a4,1
     c8e:	0791                	addi	a5,a5,4
     c90:	fea714e3          	bne	a4,a0,c78 <main+0x5d6>
     c94:	b53d                	j	ac2 <main+0x420>
          mel[i] = 0;
     c96:	0007a023          	sw	zero,0(a5)
     c9a:	bfcd                	j	c8c <main+0x5ea>
    if (e < TOL_OFF)
     c9c:	4602                	lw	a2,0(sp)
     c9e:	09500693          	li	a3,149
     ca2:	c1418793          	addi	a5,gp,-1004 # 20000010 <silcount>
     ca6:	00c6c563          	blt	a3,a2,cb0 <main+0x60e>
      silcount++; // silent frame, end of sample?
     caa:	4394                	lw	a3,0(a5)
     cac:	0685                	addi	a3,a3,1
     cae:	c394                	sw	a3,0(a5)
    if (silcount >= 20 && wsize < MINSIZE) {
     cb0:	4390                	lw	a2,0(a5)
     cb2:	46cd                	li	a3,19
     cb4:	eac6dfe3          	bge	a3,a2,b72 <main+0x4d0>
     cb8:	469d                	li	a3,7
     cba:	eae6cce3          	blt	a3,a4,b72 <main+0x4d0>
      silcount = 0;
     cbe:	0007a023          	sw	zero,0(a5)
      wsize = 0;
     cc2:	00040023          	sb	zero,0(s0)
     cc6:	b575                	j	b72 <main+0x4d0>
      if (wsize > 16) {
     cc8:	47c1                	li	a5,16
     cca:	f0f488e3          	beq	s1,a5,bda <main+0x538>
    if (wsize == WSIZE || (silcount >= 15 && wsize >= MINSIZE)) {
     cce:	4581                	li	a1,0
            word[i * CEPS + n] = word[k * CEPS + n];
     cd0:	00359313          	slli	t1,a1,0x3
          k = i * wsize / 16;
     cd4:	8526                	mv	a0,s1
     cd6:	c63e                	sw	a5,12(sp)
            word[i * CEPS + n] = word[k * CEPS + n];
     cd8:	c41a                	sw	t1,8(sp)
          k = i * wsize / 16;
     cda:	c22e                	sw	a1,4(sp)
     cdc:	bc4ff0ef          	jal	ra,a0 <__mulsi3>
     ce0:	1a418693          	addi	a3,gp,420 # 200005a0 <word>
     ce4:	8511                	srai	a0,a0,0x4
          for (n = 0; n < CEPS; n++)
     ce6:	47b2                	lw	a5,12(sp)
     ce8:	4322                	lw	t1,8(sp)
     cea:	4592                	lw	a1,4(sp)
            word[i * CEPS + n] = word[k * CEPS + n];
     cec:	050e                	slli	a0,a0,0x3
     cee:	00a68733          	add	a4,a3,a0
          for (n = 0; n < CEPS; n++)
     cf2:	4281                	li	t0,0
     cf4:	4621                	li	a2,8
            word[i * CEPS + n] = word[k * CEPS + n];
     cf6:	00070083          	lb	ra,0(a4)
     cfa:	40a703b3          	sub	t2,a4,a0
     cfe:	939a                	add	t2,t2,t1
     d00:	00138023          	sb	ra,0(t2) # ff000000 <_eusrstack+0xdefff800>
          for (n = 0; n < CEPS; n++)
     d04:	0285                	addi	t0,t0,1
     d06:	0705                	addi	a4,a4,1
     d08:	fec297e3          	bne	t0,a2,cf6 <main+0x654>
        for (i = 0; i < 16; i++) {
     d0c:	17fd                	addi	a5,a5,-1
     d0e:	0585                	addi	a1,a1,1
     d10:	f3e1                	bnez	a5,cd0 <main+0x62e>
     d12:	b5e1                	j	bda <main+0x538>
    if (wsize == WSIZE || (silcount >= 15 && wsize >= MINSIZE)) {
     d14:	47c1                	li	a5,16
     d16:	bf65                	j	cce <main+0x62c>
        c++;
     d18:	00178313          	addi	t1,a5,1
      while (cb[c] != -1) {
     d1c:	4681                	li	a3,0
        dist = 0; // printf("k=%d\n",k);
     d1e:	4701                	li	a4,0
            d = word[i * CEPS + n] - cb[c];
     d20:	45b2                	lw	a1,12(sp)
          for (n = 0; n < CEPS; n++, c++) {
     d22:	4481                	li	s1,0
            d = word[i * CEPS + n] - cb[c];
     d24:	95b6                	add	a1,a1,a3
     d26:	c22e                	sw	a1,4(sp)
     d28:	006385b3          	add	a1,t2,t1
     d2c:	c42e                	sw	a1,8(sp)
     d2e:	ce3e                	sw	a5,28(sp)
     d30:	4792                	lw	a5,4(sp)
     d32:	d436                	sw	a3,40(sp)
     d34:	d21a                	sw	t1,36(sp)
     d36:	009785b3          	add	a1,a5,s1
     d3a:	47a2                	lw	a5,8(sp)
     d3c:	00058583          	lb	a1,0(a1)
     d40:	d03a                	sw	a4,32(sp)
     d42:	00978533          	add	a0,a5,s1
     d46:	00050503          	lb	a0,0(a0)
     d4a:	ca32                	sw	a2,20(sp)
     d4c:	c816                	sw	t0,16(sp)
     d4e:	8d89                	sub	a1,a1,a0
            dist += d * d;
     d50:	852e                	mv	a0,a1
     d52:	b4eff0ef          	jal	ra,a0 <__mulsi3>
     d56:	5702                	lw	a4,32(sp)
          for (n = 0; n < CEPS; n++, c++) {
     d58:	0485                	addi	s1,s1,1
     d5a:	45a1                	li	a1,8
            dist += d * d;
     d5c:	972a                	add	a4,a4,a0
          for (n = 0; n < CEPS; n++, c++) {
     d5e:	6505                	lui	a0,0x1
     d60:	42c2                	lw	t0,16(sp)
     d62:	4652                	lw	a2,20(sp)
     d64:	47f2                	lw	a5,28(sp)
     d66:	5312                	lw	t1,36(sp)
     d68:	56a2                	lw	a3,40(sp)
     d6a:	f7050393          	addi	t2,a0,-144 # f70 <cb>
     d6e:	fcb490e3          	bne	s1,a1,d2e <main+0x68c>
        for (i = 0; i < 16; i++) {
     d72:	06a1                	addi	a3,a3,8
     d74:	08000593          	li	a1,128
          for (n = 0; n < CEPS; n++, c++) {
     d78:	0321                	addi	t1,t1,8
        for (i = 0; i < 16; i++) {
     d7a:	fab693e3          	bne	a3,a1,d20 <main+0x67e>
     d7e:	08178793          	addi	a5,a5,129
        if (dist < bestdist) {
     d82:	e6c75ae3          	bge	a4,a2,bf6 <main+0x554>
        k = cb[c];
     d86:	cc16                	sw	t0,24(sp)
     d88:	863a                	mv	a2,a4
     d8a:	b5b5                	j	bf6 <main+0x554>

00000d8c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler() {
     d8c:	fc410113          	addi	sp,sp,-60
     d90:	c63e                	sw	a5,12(sp)
  if (TIM1->INTFR & TIM_FLAG_Update) {
     d92:	400137b7          	lui	a5,0x40013
void TIM1_UP_IRQHandler() {
     d96:	c83a                	sw	a4,16(sp)
  if (TIM1->INTFR & TIM_FLAG_Update) {
     d98:	c107d703          	lhu	a4,-1008(a5) # 40012c10 <_eusrstack+0x20012410>
void TIM1_UP_IRQHandler() {
     d9c:	dc06                	sw	ra,56(sp)
     d9e:	da16                	sw	t0,52(sp)
     da0:	d81a                	sw	t1,48(sp)
     da2:	d61e                	sw	t2,44(sp)
     da4:	d422                	sw	s0,40(sp)
     da6:	d226                	sw	s1,36(sp)
     da8:	d02a                	sw	a0,32(sp)
     daa:	ce2e                	sw	a1,28(sp)
     dac:	cc32                	sw	a2,24(sp)
     dae:	ca36                	sw	a3,20(sp)
  if (TIM1->INTFR & TIM_FLAG_Update) {
     db0:	8b05                	andi	a4,a4,1
     db2:	0c070e63          	beqz	a4,e8e <TIM1_UP_IRQHandler+0x102>
     db6:	c0078793          	addi	a5,a5,-1024
    TIM1->INTFR = ~TIM_FLAG_Update;
     dba:	5779                	li	a4,-2
     dbc:	00e79823          	sh	a4,16(a5)
    result = ADC1->RDATAR;
     dc0:	400127b7          	lui	a5,0x40012
     dc4:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
     dc8:	47fc                	lw	a5,76(a5)
    total += result;
     dca:	c1818713          	addi	a4,gp,-1000 # 20000014 <total>
     dce:	4314                	lw	a3,0(a4)
    result = result - 512;
     dd0:	e0078793          	addi	a5,a5,-512
     dd4:	c1818593          	addi	a1,gp,-1000 # 20000014 <total>
    total += result;
     dd8:	97b6                	add	a5,a5,a3
    samcount++;
     dda:	c1018613          	addi	a2,gp,-1008 # 2000000c <samcount>
    total += result;
     dde:	c31c                	sw	a5,0(a4)
    samcount++;
     de0:	4218                	lw	a4,0(a2)
     de2:	c1018693          	addi	a3,gp,-1008 # 2000000c <samcount>
     de6:	c02e                	sw	a1,0(sp)
     de8:	0705                	addi	a4,a4,1
     dea:	c218                	sw	a4,0(a2)
    if (samcount == 8) {
     dec:	c236                	sw	a3,4(sp)
     dee:	4621                	li	a2,8
     df0:	08c71663          	bne	a4,a2,e7c <TIM1_UP_IRQHandler+0xf0>
      total >>= 3;
     df4:	878d                	srai	a5,a5,0x3
     df6:	c19c                	sw	a5,0(a1)
      buffer[posn] = (int16_t)total;
     df8:	c0c18593          	addi	a1,gp,-1012 # 20000008 <posn>
     dfc:	4198                	lw	a4,0(a1)
     dfe:	c2018693          	addi	a3,gp,-992 # 2000001c <buffer>
     e02:	00171513          	slli	a0,a4,0x1
     e06:	96aa                	add	a3,a3,a0
     e08:	00f69023          	sh	a5,0(a3)
      posn++;
     e0c:	0705                	addi	a4,a4,1
     e0e:	c0c18793          	addi	a5,gp,-1012 # 20000008 <posn>
     e12:	c198                	sw	a4,0(a1)
      if (posn == FFT) {
     e14:	08000693          	li	a3,128
     e18:	c43e                	sw	a5,8(sp)
     e1a:	c2018493          	addi	s1,gp,-992 # 2000001c <buffer>
     e1e:	04d71963          	bne	a4,a3,e70 <TIM1_UP_IRQHandler+0xe4>
        if (lock == 1)
     e22:	c081a683          	lw	a3,-1016(gp) # 20000004 <lock>
     e26:	4705                	li	a4,1
     e28:	00e69763          	bne	a3,a4,e36 <TIM1_UP_IRQHandler+0xaa>
          printf("oops lock\n");
     e2c:	6505                	lui	a0,0x1
     e2e:	f6450513          	addi	a0,a0,-156 # f64 <TIM1_UP_IRQHandler+0x1d8>
     e32:	f2eff0ef          	jal	ra,560 <puts>
          im[posn] = 0;
     e36:	20000613          	li	a2,512
     e3a:	4581                	li	a1,0
     e3c:	d4018513          	addi	a0,gp,-704 # 2000013c <im>
     e40:	f0eff0ef          	jal	ra,54e <memset>
     e44:	8726                	mv	a4,s1
     e46:	fa418693          	addi	a3,gp,-92 # 200003a0 <re>
     e4a:	10048613          	addi	a2,s1,256
     e4e:	c2018413          	addi	s0,gp,-992 # 2000001c <buffer>
        for (posn = 0; posn < FFT; posn++) {
     e52:	04c41e63          	bne	s0,a2,eae <TIM1_UP_IRQHandler+0x122>
        for (posn = 0; posn < FFT - N; posn++)
     e56:	08048793          	addi	a5,s1,128
     e5a:	06f71163          	bne	a4,a5,ebc <TIM1_UP_IRQHandler+0x130>
        posn = FFT - N;
     e5e:	4722                	lw	a4,8(sp)
     e60:	04000793          	li	a5,64
     e64:	c31c                	sw	a5,0(a4)
        count++;
     e66:	c0418793          	addi	a5,gp,-1020 # 20000000 <count>
     e6a:	4398                	lw	a4,0(a5)
     e6c:	0705                	addi	a4,a4,1
     e6e:	c398                	sw	a4,0(a5)
      samcount = 0;
     e70:	4792                	lw	a5,4(sp)
     e72:	0007a023          	sw	zero,0(a5)
      total = 0;
     e76:	4782                	lw	a5,0(sp)
     e78:	0007a023          	sw	zero,0(a5)
    ADC1->CTLR2 |= ADC_SWSTART; // start next ADC conversion
     e7c:	400127b7          	lui	a5,0x40012
     e80:	4087a703          	lw	a4,1032(a5) # 40012408 <_eusrstack+0x20011c08>
     e84:	004006b7          	lui	a3,0x400
     e88:	8f55                	or	a4,a4,a3
     e8a:	40e7a423          	sw	a4,1032(a5)
}
     e8e:	5422                	lw	s0,40(sp)
     e90:	50e2                	lw	ra,56(sp)
     e92:	52d2                	lw	t0,52(sp)
     e94:	5342                	lw	t1,48(sp)
     e96:	53b2                	lw	t2,44(sp)
     e98:	5492                	lw	s1,36(sp)
     e9a:	5502                	lw	a0,32(sp)
     e9c:	45f2                	lw	a1,28(sp)
     e9e:	4662                	lw	a2,24(sp)
     ea0:	46d2                	lw	a3,20(sp)
     ea2:	4742                	lw	a4,16(sp)
     ea4:	47b2                	lw	a5,12(sp)
     ea6:	03c10113          	addi	sp,sp,60
     eaa:	30200073          	mret
          re[posn] = (int)buffer[posn];
     eae:	00041583          	lh	a1,0(s0)
     eb2:	0691                	addi	a3,a3,4
     eb4:	0409                	addi	s0,s0,2
     eb6:	feb6ae23          	sw	a1,-4(a3) # 3ffffc <stt.c.5fff5958+0x3fdbb7>
        for (posn = 0; posn < FFT; posn++) {
     eba:	bf61                	j	e52 <TIM1_UP_IRQHandler+0xc6>
          buffer[posn] = buffer[posn + N];
     ebc:	08075683          	lhu	a3,128(a4)
     ec0:	0709                	addi	a4,a4,2
     ec2:	fed71f23          	sh	a3,-2(a4)
        for (posn = 0; posn < FFT - N; posn++)
     ec6:	bf51                	j	e5a <TIM1_UP_IRQHandler+0xce>
     ec8:	6e49                	lui	t3,0x12
     eca:	7469                	lui	s0,0xffffa
     ecc:	6169                	addi	sp,sp,208
     ece:	696c                	flw	fa1,84(a0)
     ed0:	697a                	flw	fs2,156(sp)
     ed2:	676e                	flw	fa4,216(sp)
     ed4:	4120                	lw	s0,64(a0)
     ed6:	4344                	lw	s1,4(a4)
     ed8:	2e2e                	fld	ft8,200(sp)
     eda:	202e                	fld	ft0,200(sp)
     edc:	6f28                	flw	fa0,88(a4)
     ede:	206e                	fld	ft0,216(sp)
     ee0:	6970                	flw	fa2,84(a0)
     ee2:	206e                	fld	ft0,216(sp)
     ee4:	4450                	lw	a2,12(s0)
     ee6:	2e34                	fld	fa3,88(a2)
     ee8:	2e2e                	fld	ft8,200(sp)
     eea:	0d29                	addi	s10,s10,10
     eec:	0000                	unimp
     eee:	0000                	unimp
     ef0:	696c6143          	fmadd.s	ft2,fs8,fs6,fa3,unknown
     ef4:	7262                	flw	ft4,56(sp)
     ef6:	7461                	lui	s0,0xffff8
     ef8:	6e69                	lui	t3,0x1a
     efa:	44412067          	0x44412067
     efe:	2e2e2e43          	fmadd.q	ft8,ft8,ft2,ft5,rdn
     f02:	000d                	c.nop	3
     f04:	696c6143          	fmadd.s	ft2,fs8,fs6,fa3,unknown
     f08:	7262                	flw	ft4,56(sp)
     f0a:	7461                	lui	s0,0xffff8
     f0c:	6e69                	lui	t3,0x1a
     f0e:	6f642067          	0x6f642067
     f12:	656e                	flw	fa0,216(sp)
     f14:	2e2e                	fld	ft8,200(sp)
     f16:	0d2e                	slli	s10,s10,0xb
     f18:	0000                	unimp
     f1a:	0000                	unimp
     f1c:	6e49                	lui	t3,0x12
     f1e:	7469                	lui	s0,0xffffa
     f20:	6169                	addi	sp,sp,208
     f22:	696c                	flw	fa1,84(a0)
     f24:	697a                	flw	fs2,156(sp)
     f26:	676e                	flw	fa4,216(sp)
     f28:	7420                	flw	fs0,104(s0)
     f2a:	6d69                	lui	s10,0x1a
     f2c:	7265                	lui	tp,0xffff9
     f2e:	2e2e                	fld	ft8,200(sp)
     f30:	0d2e                	slli	s10,s10,0xb
     f32:	0000                	unimp
     f34:	73706f6f          	jal	t5,7e6a <stt.c.5fff5958+0x5a25>
     f38:	6620                	flw	fs0,72(a2)
     f3a:	6172                	flw	ft2,28(sp)
     f3c:	656d                	lui	a0,0x1b
     f3e:	6e756f63          	bltu	a0,t2,163c <ch32fun.c.7589f8fb+0x388>
     f42:	0074                	addi	a3,sp,12
     f44:	6562                	flw	fa0,24(sp)
     f46:	6d207473          	csrrci	s0,0x6d2,0
     f4a:	7461                	lui	s0,0xffff8
     f4c:	3d206863          	bltu	zero,s2,131c <ch32fun.c.7589f8fb+0x68>
     f50:	2520                	fld	fs0,72(a0)
     f52:	2c64                	fld	fs1,216(s0)
     f54:	6220                	flw	fs0,64(a2)
     f56:	7365                	lui	t1,0xffff9
     f58:	6474                	flw	fa3,76(s0)
     f5a:	7369                	lui	t1,0xffffa
     f5c:	3d74                	fld	fa3,248(a0)
     f5e:	6425                	lui	s0,0x9
     f60:	000a                	c.slli	zero,0x2
     f62:	0000                	unimp
     f64:	73706f6f          	jal	t5,7e9a <stt.c.5fff5958+0x5a55>
     f68:	6c20                	flw	fs0,88(s0)
     f6a:	006b636f          	jal	t1,b6f70 <stt.c.5fff5958+0xb4b2b>
	...

00000f70 <cb>:
     f70:	0e2e2901 f6fa030a 0d2823fb fafa070f     .).......#(.....
     f80:	183515ff f4fd0306 193028ff f8f9120e     ..5......(0.....
     f90:	102a02fe fdfa090d 0e300e01 f5f70209     ..*.......0.....
     fa0:	0f3408f9 fb00020b 0b321b02 f5f70112     ..4.......2.....
     fb0:	062d1d05 fff50306 fb2a1b05 f8f10302     ..-.......*.....
     fc0:	033c0bfb 0bea0a07 0a3211fb fbfeff06     ..<.......2.....
     fd0:	0b361308 f5f7ff01 062912ff 0afa090c     ..6.......).....
     fe0:	fa2b1cfb f6ff0214 0f2e1c0b efffff15     ..+.............
     ff0:	ce2202f3 06070fe5 d71c0300 04010c06     ..".............
    1000:	121cfafe 1204fe06 0c1307fa 0c1df4f6     ................
    1010:	020208ef 1212130a f005fe08 1a131108     ................
    1020:	0407fdfc fd1f0300 0810fafc 08080815     ................
    1030:	fa1d16ed 10f40afe 04f5ff05 110714fb     ................
    1040:	f0160819 07090e03 0906f4ff 15fc101b     ................
    1050:	0608f50f fefc2c12 e51df1f7 0c050c11     .....,..........
    1060:	c931eff7 09fb0506 d31cfbf8 1809040a     ..1.............
    1070:	3b03fa00 effe0605 1afb0e01 0205fcfe     ...;............
    1080:	15f4f104 f411f1ec 00fafdf2 03fcecff     ................
    1090:	13fa04f9 0ef8f8e9 17f719f0 fffdfbf0     ................
    10a0:	00040001 fb0efbf5 22030f00 080104f3     ..........."....
    10b0:	0902f5fb 0a03ec03 1c10f3fe 05fdfcfa     ................
    10c0:	25fa0703 fd08feef 2406fdfd 0a0308ea     ...%.......$....
    10d0:	12f70702 050807f7 21ff010b f30a16f5     ...........!....
    10e0:	2dfff800 f9fe0af7 20f3f710 00f80dfc     ...-....... ....
    10f0:	04f9ffff 12151d3b fe00fc04 150b083c     ....;.......<...
    1100:	fefff6f4 160c073f 0005fff7 150c063d     ....?.......=...
    1110:	0207f8ee 21090139 0407f8eb 15fe0838     ....9..!....8...
    1120:	010002f4 12040d3d fefd02ef 1eff0f45     ....=.......E...
    1130:	0403fbef 22021845 0b02f5f1 1f04113f     ....E.."....?...
    1140:	fafcfcf7 19f90a44 00fcfbf1 2304173b     ....D.......;..#
    1150:	f9fd01fe 22071242 fafbf4ee 19081544     ....B.."....D...
    1160:	fe04fcf0 131c1c41 f9fef2f5 161b1f41     ....A.......A...
    1170:	f9f6edf7 f9080106 0603f515 0d0d42f8     .............B..
    1180:	fdf6f318 0d143af6 00f5f115 141e38f4     .....:.......8..
    1190:	f4f6fb10 fcef04ee 04f7f30b f5e6f7fd     ................
    11a0:	00f2f906 ede2030c 02f6e7fd f8e80209     ................
    11b0:	fdf3f3ff fae9fe03 0001e903 e8ec05fe     ................
    11c0:	0cedfff5 021cf909 08f90606 fd1a0e00     ................
    11d0:	fffffe01 0b0b0df7 fd0e08fe 0516f2fe     ................
    11e0:	eff608f4 010afe0a 120a03fe fe09011a     ................
    11f0:	fcf7fcff f8fb09f8 fc07164f 06fd0804     ........O.......
    1200:	fcfdf744 04040d03 02010a5c 020303fd     D.......\.......
    1210:	fc04124f 03ff0400 04ff1b51 00000d0a     O.......Q.......
    1220:	00001f55 fc000a0c faf41559 070e150e     U.......Y.......
    1230:	f8f5195a fc050d00 f4ea1953 080b1305     Z.......S.......
    1240:	f5f01f5c fd040c03 feff1555 ff000102     \.......U.......
    1250:	fbf81c57 03060b0c 0900234e 00040606     W.......N#......
    1260:	05fc2351 fe0c100b 0603ff42 08030203     Q#......B.......
    1270:	03fd2059 f6070b07 05fb14f9 0606fe12     Y ..............
    1280:	feff1307 fffbfe0d fe061500 030e0206     ................
    1290:	000e1cf9 f4f7010b f0043a16 f90af707     .........:......
    12a0:	fdfb11fc 0105f809 eef33604 f7f4010b     .........6......
    12b0:	ebfa4dfd f1f00502 2831060c fa0df909     .M........1(....
    12c0:	0b1101f6 08f8ee08 0d0cf6f7 030c1517     ................
    12d0:	1017f104 0a090a0c fe2008fd 07fcff05     .......... .....
    12e0:	1710f8fd fffc0a25 051305f8 fb06fd11     ....%...........
    12f0:	0312f7f1 0009effd f705fd03 0b3d0d06     ..............=.
    1300:	04fc0b05 0c3b1afd 08f70703 0a321ff7     ......;.......2.
    1310:	0bf40108 0b371cf4 06fafb07 093218f9     ......7.......2.
    1320:	fbfff312 0e331101 07f703f8 04431df9     ......3.......C.
    1330:	fdf5ff0c 064b21fa fef8ff0c 0dd60703     .....!K.........
    1340:	0fffff10 05f209f6 0cfa120c fdfcff00     ................
    1350:	15fefc00 f9e41509 06e80403 04e50ff6     ................
    1360:	07f9070d fde50df4 f705ea0f 28190707     ...............(
    1370:	060b0c0e 2421fbfd d0020108 f4fbfb0b     ......!$........
    1380:	c600ff0b f7f7060c c602f308 fb040d08     ................
    1390:	e3fb020c f803090b d6fbff0b f3011015     ................
    13a0:	d1f8f70a f4fe1511 e901fe0a fbfb1011     ................
    13b0:	d7fcfd04 faf70904 e5f2f70e f3f20908     ................
    13c0:	f7fbfc15 f4fc1a1f 32f6fb18 e805101f     ...........2....
    13d0:	32fafcfd f10d1913 23ee0203 f2fe1814     ...2.......#....
    13e0:	14f7f300 edf30609 2ef8fa09 f5f71425     ............%...
    13f0:	2cf4fd0d eff01312 1d38050a effd0d0c     ...,......8.....
    1400:	40000204 f412251c 3d0204f3 f302170e     ...@.%.....=....
    1410:	3df405fa ef0c2509 42f10a00 edfe1704     ...=.%.....B....
    1420:	37f2f900 07021704 1bfef705 04040208     ...7............
    1430:	1a090208 fd11020c 0e0feaf8 06010917     ................
    1440:	3c03fb00 04fc15f8 2901f505 fe1ced04     ...<.......)....
    1450:	0bf315f7 0bfb0204 22071112 0aff0708     ..........."....
    1460:	31000cf0 110bf324 361215eb 010cf130     ...1$......60...
    1470:	4a1107ed fc0c1427 1b0206f9 01faead4     ...J'...........
    1480:	24fff8fd 05fe03e0 2d050701 10f203eb     ...$.......-....
    1490:	2905e9f6 03ea0cee 24fae7fa f4e60af3     ...).......$....
    14a0:	25f5f7fa fcfcfef1 270ef0e9 f5f512f1     ...%.......'....
    14b0:	1ffbf5fb 08f20dd9 2cf8e4fb feea0bee     ...........,....
    14c0:	280bf1fd ffe011ef 27eff70a fef111dd     ...(.......'....
    14d0:	21f6f301 fcf818e1 2300e5f7 fb0403e7     ...!.......#....
    14e0:	2bfb03f6 0ef609df 2c04f60a 03fb04d9     ...+.......,....
    14f0:	1bf9fe0f 040604de 05fefe11 020a1c2d     ............-...
    1500:	0701f4f5 fa09243b 0b05fbf5 f7012944     ....;$......D)..
    1510:	020603f8 fd07233e fa07fdf2 f3fd2142     ....>#......B!..
    1520:	fb02fdf8 f3071f3e f604fff7 fc032639     ....>.......9&..
    1530:	ff03fef6 f404203c ff0502f8 fdf92441     ....< ......A$..
    1540:	0309fbf3 f5fa1a52 0008fbf8 01f61141     ....R.......A...
    1550:	fa0307fe f2f2163e f500fef6 f2f31847     ....>.......G...
    1560:	fcfcf7fb eff20a3b fbfef2f2 ebf3143d     ....;.......=...
    1570:	f801f9fb fcf90d34 f303fcfd 0b141f06     ....4...........
    1580:	f7020af8 0b2e290a f8ef0302 052428f4     .....).......($.
    1590:	f8e8f1fc 012c29eb 02f0faf9 021625ec     .....),......%..
    15a0:	f6ecf907 0a112af4 f6f8f5f2 03152bf6     .....*.......+..
    15b0:	f8fafaee 06062df1 fefdf1f2 fe0632ee     .....-.......2..
    15c0:	03fef3f8 f8f630f2 0500ed06 faf537f5     .....0.......7..
    15d0:	0bfbf105 fff62ef9 0704fa07 faf92cff     .............,..
    15e0:	09fc030a 01fd29ff 00ff040f 04fc23fb     .....).......#..
    15f0:	0bf8fe12 ff0f2809 fdfd0708 19da070d     .....(..........
    1600:	01fd08eb 12d1fb02 faf707f8 18d5fa02     ................
    1610:	0ffa05f4 16d0fdfc 080006f1 0ee100fa     ................
    1620:	f7f405fe 332001fa fbff0309 3922fdfb     ...... 3......"9
    1630:	f1010905 421ffaf1 f3ef000a 3411f3eb     .......B.......4
    1640:	f4f10305 3619f8f1 f3f50707 390dfaed     .......6.......9
    1650:	f5ed0209 3510efeb f4ee0002 2f18f6ee     .......5......./
    1660:	f1f7fd0a 3024f2fa f2f1fb0f 2c1ff6f4     ......$0.......,
    1670:	f2f80100 271bf4f6 f0fdfd00 1a08f1f0     .......'........
    1680:	f5f7ffe9 1700f900 f2f6fce6 44fdf5fb     ...............D
    1690:	0409ecea 2a080c00 f71305ee 2cfffdfa     .......*.......,
    16a0:	0015f8ed 1c09fd02 000ef9e7 18fe0508     ................
    16b0:	040f04f5 190700fe f51208e7 2cf51312     ...............,
    16c0:	f912fce7 1cfa0b0c f4020ef2 1ef40b0f     ................
    16d0:	f8130ee4 1eff0dfb ff1604dd 1bf50d02     ................
    16e0:	0b1df7d8 24f3f908 051d0bdc 1ff90907     .......$........
    16f0:	fa170ae9 1eff0305 001d0ce3 09fe0900     ................
    1700:	f80113d4 ff02fbfc fe153019 fbedfa01     .........0......
    1710:	ff182e30 fcf401fb 05161f34 f9f804fc     0.......4.......
    1720:	02252129 fcf512fb fb1c1a2c f80713ed     )!%.....,.......
    1730:	010c1030 ff0c0de9 12040429 05131001     0.......).......
    1740:	1df9fe3c fd02fbf6 0ef5fe42 05fbfaff     <.......B.......
    1750:	12fef441 0709fc01 0af1fa44 0a050700     A.......D.......
    1760:	0ff6f93f 050002ff 14f9f63c 040b03ff     ?.......<.......
    1770:	0ef8f83b 03050c0f 00f00039 04fffd01     ;.......9.......
    1780:	20242300 f90afe0b 1d2224f5 f80cfa0b     .#$ .....$".....
    1790:	16390bf3 ee00f4ee 15300eff f9fb0102     ..9.......0.....
    17a0:	142f04f6 fafe0d0a 0e3c02f2 f3f7fdfa     ../.......<.....
    17b0:	043e07f5 f7eefef4 09370c02 f3f806f4     ..>.......7.....
    17c0:	054909ff f7ed0200 064d0d02 f9ea020a     ..I.......M.....
    17d0:	fb3c17ff 03fa0708 fc311208 00050106     ..<.......1.....
    17e0:	0a451503 fdf4010c 024022ff fbef060b     ..E......"@.....
    17f0:	082924f9 f9f4f500 091b2bfd fdf5ff07     .$)......+......
    1800:	f02e02fb ff0904f4 de35fefc f70606eb     ..........5.....
    1810:	e32efdff f0fffbf3 de2a0702 eb03f7f9     ..........*.....
    1820:	e926f9f7 eefceff7 f222fcf7 0002ec0e     ..&.......".....
    1830:	e92ceeff f706fb12 e12bfcfa fb09f409     ..,.......+.....
    1840:	e62503fd ff02f10b e72406ff f602fa14     ..%.......$.....
    1850:	d91f09fb 0a0d0212 e52903f5 0c0afd0b     ..........).....
    1860:	e93300f8 0402fd14 f02e0c03 0b0e0912     ..3.............
    1870:	fd2703fb 16081212 041d000a 0d0a111d     ..'.............
    1880:	00fffc04                                ....

00001884 <dctm_8bit>:
    1884:	0000007e 0000007b 00000075 0000006c     ~...{...u...l...
    1894:	00000060 00000052 00000042 00000030     `...R...B...0...
    18a4:	0000001e 0000000a fffffff6 ffffffe2     ................
    18b4:	ffffffd0 ffffffbe ffffffae ffffffa0     ................
    18c4:	ffffff94 ffffff8b ffffff85 ffffff82     ................
    18d4:	0000007d 00000071 00000059 00000039     }...q...Y...9...
    18e4:	00000014 ffffffec ffffffc7 ffffffa7     ................
    18f4:	ffffff8f ffffff83 ffffff83 ffffff8f     ................
    1904:	ffffffa7 ffffffc7 ffffffec 00000014     ................
    1914:	00000039 00000059 00000071 0000007d     9...Y...q...}...
    1924:	0000007b 00000060 00000030 fffffff6     {...`...0.......
    1934:	ffffffbe ffffff94 ffffff82 ffffff8b     ................
    1944:	ffffffae ffffffe2 0000001e 00000052     ............R...
    1954:	00000075 0000007e 0000006c 00000042     u...~...l...B...
    1964:	0000000a ffffffd0 ffffffa0 ffffff85     ................
    1974:	00000078 0000004a 00000000 ffffffb6     x...J...........
    1984:	ffffff88 ffffff88 ffffffb6 00000000     ................
    1994:	0000004a 00000078 00000078 0000004a     J...x...x...J...
    19a4:	00000000 ffffffb6 ffffff88 ffffff88     ................
    19b4:	ffffffb6 00000000 0000004a 00000078     ........J...x...
    19c4:	00000075 00000030 ffffffd0 ffffff8b     u...0...........
    19d4:	ffffff8b ffffffd0 00000030 00000075     ........0...u...
    19e4:	00000075 00000030 ffffffd0 ffffff8b     u...0...........
    19f4:	ffffff8b ffffffd0 00000030 00000075     ........0...u...
    1a04:	00000075 00000030 ffffffd0 ffffff8b     u...0...........
    1a14:	00000071 00000014 ffffffa7 ffffff83     q...............
    1a24:	ffffffc7 00000039 0000007d 00000059     ....9...}...Y...
    1a34:	ffffffec ffffff8f ffffff8f ffffffec     ................
    1a44:	00000059 0000007d 00000039 ffffffc7     Y...}...9.......
    1a54:	ffffff83 ffffffa7 00000014 00000071     ............q...
    1a64:	0000006c fffffff6 ffffff8b ffffffa0     l...............
    1a74:	0000001e 0000007b 00000052 ffffffd0     ....{...R.......
    1a84:	ffffff82 ffffffbe 00000042 0000007e     ........B...~...
    1a94:	00000030 ffffffae ffffff85 ffffffe2     0...............
    1aa4:	00000060 00000075 0000000a ffffff94     `...u...........
    1ab4:	00000066 ffffffd9 ffffff82 ffffffd9     f...............
    1ac4:	00000066 00000066 ffffffd9 ffffff82     f...f...........
    1ad4:	ffffffd9 00000066 00000066 ffffffd9     ....f...f.......
    1ae4:	ffffff82 ffffffd9 00000066 00000066     ........f...f...
    1af4:	ffffffd9 ffffff82 ffffffd9 00000066     ............f...

00001b04 <first>:
	...
    1b0c:	00000008 0000000c 00000010 00000012     ................
    1b1c:	00000014 00000016 00000018              ............

00001b28 <mel_mx>:
    1b28:	0000007f 0000007a 0000003f 000000f3     ....z...?.......
    1b38:	0000005f 00000080 0000001f 00000006     _...............
    1b48:	00000000 0000005f 00000077 0000001f     ...._...w.......
    1b58:	000000f0 0000006f 00000083 0000002f     ....o......./...
    1b68:	0000000a 00000000 0000006f 00000073     ........o...s...
    1b78:	0000002f 000000ed 0000004f 00000087     /.......O.......
    1b88:	0000000f 0000000d 00000000 0000004f     ............O...
    1b98:	00000070 0000000f 000000ea 00000077     p...........w...
    1ba8:	0000008a 00000037 00000010 00000000     ....7...........
    1bb8:	00000077 0000006d 00000037 000000e7     w...m...7.......
    1bc8:	00000057 0000008d 00000017 00000013     W...............
    1bd8:	00000000 00000057 0000006a 00000017     ....W...j.......
    1be8:	000000e3 00000067 00000090 00000027     ....g.......'...
    1bf8:	00000017 00000000 00000067 00000066     ........g...f...
    1c08:	00000027 000000e0 00000047 00000094     '.......G.......
    1c18:	00000007 0000001a 00000000 00000047     ............G...
    1c28:	00000063 00000007 000000dd 0000007b     c...........{...
    1c38:	00000097 0000003b 0000001d 00000000     ....;...........
    1c48:	0000007b 00000060 0000003b 000000d9     {...`...;.......
    1c58:	0000005b 0000009a 0000001b 00000021     [...........!...
    1c68:	00000000 0000005b 00000058 0000001b     ....[...X.......
    1c78:	000000ca 0000006b 0000009e 0000002b     ....k.......+...
    1c88:	00000035 00000000 0000006b 00000045     5.......k...E...
    1c98:	0000002b 000000a4 0000004b 000000aa     +.......K.......
    1ca8:	0000000b 00000055 00000000 0000004b     ....U.......K...
    1cb8:	00000026 0000000b 00000073 00000073     &.......s...s...
    1cc8:	000000be 00000033 00000079 00000053     ....3...y...S...
    1cd8:	00000033 00000000 00000073 00000001     3.......s.......
    1ce8:	00000033 0000003f 00000053 0000007e     3...?...S...~...
    1cf8:	00000013 0000009e 00000063 00000065     ........c...e...
    1d08:	00000023 0000002d 00000000 00000013     #...-...........
    1d18:	0000000d 00000063 00000040 00000023     ....c...@...#...
    1d28:	00000073 00000043 00000092 00000003     s...C...........
    1d38:	00000064 0000007d 00000036 0000003d     d...}...6...=...
    1d48:	00000009 00000000 00000043 00000008     ........C.......
    1d58:	00000003 00000032 0000007d 0000005b     ....2...}...[...
    1d68:	0000003d 00000084 0000005d 0000006e     =.......]...n...
    1d78:	0000001d 00000049 0000006d 00000023     ....I...m...#...
    1d88:	00000000 0000005d 0000001b 0000001d     ....]...........
    1d98:	0000003d 0000006d 0000005e 0000002d     =...m...^...-...
    1da8:	0000007c 0000004d 0000005e 0000000d     |...M...^.......
    1db8:	00000040 00000075 00000022 00000035     @...u..."...5...
    1dc8:	00000004 00000000 0000002d 00000001     ........-.......
    1dd8:	0000004d 0000001c 0000000d 00000037     M...........7...
    1de8:	00000075 00000053 00000035 0000006e     u...S...5...n...
    1df8:	00000055 0000005c 00000015 00000044     U...\.......D...
    1e08:	00000065 0000002b 00000025 00000013     e...+...%.......
    1e18:	00000000 00000055 00000013 00000015     ....U...........
    1e28:	00000029 00000065 0000003f 00000025     )...e...?...%...
    1e38:	00000055 00000045 00000062 00000005     U...E...b.......
    1e48:	0000004e 00000079 0000003a 00000039     N...y...:...9...
    1e58:	00000026 00000059 00000012 00000000     &...Y...........
    1e68:	00000045 00000004 00000005 00000016     E...............
    1e78:	00000079 00000028 00000039 0000003a     y...(...9...:...
    1e88:	00000059 0000004b 00000019 0000005b     Y...K.......[...
    1e98:	00000069 0000004b 00000029 0000003b     i...K...)...;...
    1ea8:	00000049 0000002b 00000009 0000001b     I...+...........
    1eb8:	00000071 0000000a 00000000 00000019     q...............
    1ec8:	00000001 00000069 00000010 00000029     ....i.......)...
    1ed8:	0000001e 00000049 0000002c 00000009     ....I...,.......
    1ee8:	0000003b 00000071 00000049 00000031     ;...q...I...1...
    1ef8:	0000004e 00000051 00000041 00000011     N...Q...A.......
    1f08:	00000034 00000061 00000027 00000021     4...a...'...!...
    1f18:	0000001a 00000041 0000000d 00000000     ....A...........

00001f28 <ti>:
    1f28:	00000000 00000191 00000322 000004b2     ........".......
    1f38:	0000063e 000007c6 0000094a 00000ac7     >.......J.......
    1f48:	00000c3e 00000dae 00000f15 00001073     >...........s...
    1f58:	000011c7 0000130f 0000144c 0000157d     ........L...}...
    1f68:	000016a0 000017b5 000018bc 000019b3     ................
    1f78:	00001a9b 00001b72 00001c38 00001ced     ....r...8.......
    1f88:	00001d90 00001e21 00001e9f 00001f0a     ....!...........
    1f98:	00001f62 00001fa7 00001fd8 00001ff6     b...............
    1fa8:	00002000 00001ff6 00001fd8 00001fa7     . ..............
    1fb8:	00001f62 00001f0a 00001e9f 00001e21     b...........!...
    1fc8:	00001d90 00001ced 00001c38 00001b72     ........8...r...
    1fd8:	00001a9b 000019b3 000018bc 000017b5     ................
    1fe8:	000016a0 0000157d 0000144c 0000130f     ....}...L.......
    1ff8:	000011c7 00001073 00000f15 00000dae     ....s...........
    2008:	00000c3e 00000ac7 0000094a 000007c6     >.......J.......
    2018:	0000063e 000004b2 00000322 00000191     >.......".......

00002028 <tr>:
    2028:	00000000 00001ff6 00001fd8 00001fa7     ................
    2038:	00001f62 00001f0a 00001e9f 00001e21     b...........!...
    2048:	00001d90 00001ced 00001c38 00001b72     ........8...r...
    2058:	00001a9b 000019b3 000018bc 000017b5     ................
    2068:	000016a0 0000157d 0000144c 0000130f     ....}...L.......
    2078:	000011c7 00001073 00000f15 00000dae     ....s...........
    2088:	00000c3e 00000ac7 0000094a 000007c6     >.......J.......
    2098:	0000063e 000004b2 00000322 00000191     >.......".......
    20a8:	00000000 fffffe6f fffffcde fffffb4e     ....o.......N...
    20b8:	fffff9c2 fffff83a fffff6b6 fffff539     ....:.......9...
    20c8:	fffff3c2 fffff252 fffff0eb ffffef8d     ....R...........
    20d8:	ffffee39 ffffecf1 ffffebb4 ffffea83     9...............
    20e8:	ffffe960 ffffe84b ffffe744 ffffe64d     `...K...D...M...
    20f8:	ffffe565 ffffe48e ffffe3c8 ffffe313     e...............
    2108:	ffffe270 ffffe1df ffffe161 ffffe0f6     p.......a.......
    2118:	ffffe09e ffffe059 ffffe028 ffffe00a     ....Y...(.......

00002128 <window>:
    2128:	00000000 02010101 04030302 07060505     ................
    2138:	0a0a0908 0e0d0c0b 1211100f 16151413     ................
    2148:	19191817 1c1b1b1a 1e1d1d1d 1f1f1f1e     ................
    2158:	20201f1f 20202020 20202020 20202020     ..              
    2168:	20202020 20202020 20202020 1f1f2020                   ..
    2178:	1e1f1f1f 1d1d1d1e 1a1b1b1c 17181919     ................
    2188:	13141516 0f101112 0b0c0d0e 08090a0a     ................
    2198:	05050607 02030304 01010102 00000000     ................
