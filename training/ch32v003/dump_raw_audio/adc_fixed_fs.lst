
adc_fixed_fs.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	2b40006f          	j	2b4 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0324                	addi	s1,sp,392
   a:	0000                	unimp
   c:	0332                	slli	t1,t1,0xc
	...
  2e:	0000                	unimp
  30:	0332                	slli	t1,t1,0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0332                	slli	t1,t1,0xc
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0332                	slli	t1,t1,0xc
  42:	0000                	unimp
  44:	0332                	slli	t1,t1,0xc
  46:	0000                	unimp
  48:	0332                	slli	t1,t1,0xc
  4a:	0000                	unimp
  4c:	0332                	slli	t1,t1,0xc
  4e:	0000                	unimp
  50:	0332                	slli	t1,t1,0xc
  52:	0000                	unimp
  54:	0332                	slli	t1,t1,0xc
  56:	0000                	unimp
  58:	0332                	slli	t1,t1,0xc
  5a:	0000                	unimp
  5c:	0332                	slli	t1,t1,0xc
  5e:	0000                	unimp
  60:	0332                	slli	t1,t1,0xc
  62:	0000                	unimp
  64:	0332                	slli	t1,t1,0xc
  66:	0000                	unimp
  68:	0332                	slli	t1,t1,0xc
  6a:	0000                	unimp
  6c:	0332                	slli	t1,t1,0xc
  6e:	0000                	unimp
  70:	0332                	slli	t1,t1,0xc
  72:	0000                	unimp
  74:	0332                	slli	t1,t1,0xc
  76:	0000                	unimp
  78:	0332                	slli	t1,t1,0xc
  7a:	0000                	unimp
  7c:	0332                	slli	t1,t1,0xc
  7e:	0000                	unimp
  80:	0332                	slli	t1,t1,0xc
  82:	0000                	unimp
  84:	0332                	slli	t1,t1,0xc
  86:	0000                	unimp
  88:	0332                	slli	t1,t1,0xc
  8a:	0000                	unimp
  8c:	07d4                	addi	a3,sp,964
  8e:	0000                	unimp
  90:	0332                	slli	t1,t1,0xc
  92:	0000                	unimp
  94:	0332                	slli	t1,t1,0xc
  96:	0000                	unimp
  98:	0332                	slli	t1,t1,0xc
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
  a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
  a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
  a8:	862e                	mv	a2,a1
  aa:	85aa                	mv	a1,a0
  ac:	557d                	li	a0,-1
  ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
  b0:	4685                	li	a3,1
  b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
  b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
  ba:	0606                	slli	a2,a2,0x1
  bc:	0686                	slli	a3,a3,0x1
  be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
  c2:	4501                	li	a0,0
  c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
  c8:	8d91                	sub	a1,a1,a2
  ca:	8d55                	or	a0,a0,a3
  cc:	8285                	srli	a3,a3,0x1
  ce:	8205                	srli	a2,a2,0x1
  d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
  d2:	8082                	ret

000000d4 <__umodsi3>:
  d4:	8286                	mv	t0,ra
  d6:	3fc9                	jal	a8 <__hidden___udivsi3>
  d8:	852e                	mv	a0,a1
  da:	8282                	jr	t0
  dc:	40a00533          	neg	a0,a0
  e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
  e4:	40b005b3          	neg	a1,a1
  e8:	b7c1                	j	a8 <__hidden___udivsi3>
  ea:	40b005b3          	neg	a1,a1
  ee:	8286                	mv	t0,ra
  f0:	3f65                	jal	a8 <__hidden___udivsi3>
  f2:	40a00533          	neg	a0,a0
  f6:	8282                	jr	t0

000000f8 <__modsi3>:
  f8:	8286                	mv	t0,ra
  fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
  fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
 102:	375d                	jal	a8 <__hidden___udivsi3>
 104:	852e                	mv	a0,a1
 106:	8282                	jr	t0
 108:	40b005b3          	neg	a1,a1
 10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
 110:	40a00533          	neg	a0,a0
 114:	3f51                	jal	a8 <__hidden___udivsi3>
 116:	40b00533          	neg	a0,a1
 11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
{
 11e:	1131                	addi	sp,sp,-20
 120:	c426                	sw	s1,8(sp)
 122:	c806                	sw	ra,16(sp)
 124:	c622                	sw	s0,12(sp)
 126:	84ae                	mv	s1,a1
 128:	87aa                	mv	a5,a0
 12a:	85b2                	mv	a1,a2
	int overflow = 0;
 12c:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
 12e:	caad                	beqz	a3,1a0 <mini_pad+0x82>
	if(len > pad_to) {
 130:	0096d463          	bge	a3,s1,138 <mini_pad+0x1a>
 134:	84b6                	mv	s1,a3
		overflow = 1;
 136:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
 138:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
 13c:	00045363          	bgez	s0,142 <mini_pad+0x24>
 140:	4401                	li	s0,0
 142:	8622                	mv	a2,s0
 144:	853a                	mv	a0,a4
 146:	c23e                	sw	a5,4(sp)
 148:	c01a                	sw	t1,0(sp)
 14a:	26f5                	jal	536 <memset>
 14c:	4302                	lw	t1,0(sp)
 14e:	4792                	lw	a5,4(sp)
 150:	872a                	mv	a4,a0
 152:	008506b3          	add	a3,a0,s0
 156:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
 158:	40c485b3          	sub	a1,s1,a2
 15c:	04b04463          	bgtz	a1,1a4 <mini_pad+0x86>
 160:	0004d363          	bgez	s1,166 <mini_pad+0x48>
 164:	4481                	li	s1,0
 166:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
 16a:	40e60533          	sub	a0,a2,a4
	if(overflow) {
 16e:	02030463          	beqz	t1,196 <mini_pad+0x78>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 172:	02c77263          	bgeu	a4,a2,196 <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
 176:	02a00793          	li	a5,42
 17a:	fef60fa3          	sb	a5,-1(a2)
 17e:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 182:	00d77a63          	bgeu	a4,a3,196 <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
 186:	fef60f23          	sb	a5,-2(a2)
 18a:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 18e:	00d77463          	bgeu	a4,a3,196 <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
 192:	fef60ea3          	sb	a5,-3(a2)
}
 196:	40c2                	lw	ra,16(sp)
 198:	4432                	lw	s0,12(sp)
 19a:	44a2                	lw	s1,8(sp)
 19c:	0151                	addi	sp,sp,20
 19e:	8082                	ret
	if(pad_to == 0) pad_to = len;
 1a0:	86a6                	mv	a3,s1
 1a2:	bf59                	j	138 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
 1a4:	00c785b3          	add	a1,a5,a2
 1a8:	0005c503          	lbu	a0,0(a1)
 1ac:	00c685b3          	add	a1,a3,a2
 1b0:	0605                	addi	a2,a2,1
 1b2:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
 1b6:	b74d                	j	158 <mini_pad+0x3a>

000001b8 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
 1b8:	1101                	addi	sp,sp,-32
 1ba:	ce06                	sw	ra,28(sp)
 1bc:	cc22                	sw	s0,24(sp)
 1be:	ca26                	sw	s1,20(sp)
	int	negative = 0;
 1c0:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
 1c2:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
 1c4:	00055763          	bgez	a0,1d2 <mini_itoa.part.0+0x1a>
 1c8:	e689                	bnez	a3,1d2 <mini_itoa.part.0+0x1a>
		negative = 1;
 1ca:	4785                	li	a5,1
		value = -value;
 1cc:	40a00333          	neg	t1,a0
		negative = 1;
 1d0:	c03e                	sw	a5,0(sp)
 1d2:	06100413          	li	s0,97
 1d6:	c219                	beqz	a2,1dc <mini_itoa.part.0+0x24>
 1d8:	04100413          	li	s0,65
	int	negative = 0;
 1dc:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 1de:	1459                	addi	s0,s0,-10
		int digit = value % radix;
 1e0:	851a                	mv	a0,t1
 1e2:	c83a                	sw	a4,16(sp)
 1e4:	c21a                	sw	t1,4(sp)
 1e6:	c62e                	sw	a1,12(sp)
 1e8:	c41a                	sw	t1,8(sp)
 1ea:	35ed                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 1ec:	47a5                	li	a5,9
 1ee:	4322                	lw	t1,8(sp)
 1f0:	45b2                	lw	a1,12(sp)
 1f2:	4742                	lw	a4,16(sp)
 1f4:	0ff57693          	andi	a3,a0,255
 1f8:	06a7e163          	bltu	a5,a0,25a <mini_itoa.part.0+0xa2>
 1fc:	03068693          	addi	a3,a3,48
 200:	0ff6f693          	andi	a3,a3,255
 204:	00148793          	addi	a5,s1,1
 208:	00d48023          	sb	a3,0(s1)
		value /= radix;
 20c:	851a                	mv	a0,t1
 20e:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 210:	c63e                	sw	a5,12(sp)
		value /= radix;
 212:	c42e                	sw	a1,8(sp)
 214:	3d51                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
 216:	4692                	lw	a3,4(sp)
 218:	45a2                	lw	a1,8(sp)
 21a:	47b2                	lw	a5,12(sp)
 21c:	4742                	lw	a4,16(sp)
		value /= radix;
 21e:	832a                	mv	t1,a0
	} while (value > 0);
 220:	02b6fb63          	bgeu	a3,a1,256 <mini_itoa.part.0+0x9e>
	if (negative)
 224:	4682                	lw	a3,0(sp)
 226:	c699                	beqz	a3,234 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
 228:	02d00693          	li	a3,45
 22c:	00d78023          	sb	a3,0(a5)
 230:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
 234:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
 238:	01f55693          	srli	a3,a0,0x1f
 23c:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
 23e:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
 242:	8685                	srai	a3,a3,0x1
 244:	4601                	li	a2,0
 246:	17fd                	addi	a5,a5,-1
 248:	00d64b63          	blt	a2,a3,25e <mini_itoa.part.0+0xa6>
}
 24c:	40f2                	lw	ra,28(sp)
 24e:	4462                	lw	s0,24(sp)
 250:	44d2                	lw	s1,20(sp)
 252:	6105                	addi	sp,sp,32
 254:	8082                	ret
	} while (value > 0);
 256:	84be                	mv	s1,a5
 258:	b761                	j	1e0 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 25a:	96a2                	add	a3,a3,s0
 25c:	b755                	j	200 <mini_itoa.part.0+0x48>
		char j = buffer[i];
 25e:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
 262:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
 266:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
 26a:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
 26c:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
 270:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
 274:	bfc9                	j	246 <mini_itoa.part.0+0x8e>

00000276 <_write.constprop.0>:
	USART1->CTLR1 |= CTLR1_UE_Set;
#endif
}

// For debug writing to the UART.
WEAK int _write(int fd, const char *buf, int size)
 276:	872a                	mv	a4,a0
{
	for(int i = 0; i < size; i++){
 278:	4781                	li	a5,0
WEAK int _write(int fd, const char *buf, int size)
 27a:	852e                	mv	a0,a1
#ifdef CH5xx
		while(!(R8_UART1_LSR & RB_LSR_TX_ALL_EMP));
		R8_UART1_THR = buf[i];
#else
		while( !(USART1->STATR & USART_FLAG_TC));
 27c:	40014637          	lui	a2,0x40014
	for(int i = 0; i < size; i++){
 280:	00a7c363          	blt	a5,a0,286 <_write.constprop.0+0x10>
		USART1->DATAR = *buf++;
#endif
	}
	return size;
}
 284:	8082                	ret
		while( !(USART1->STATR & USART_FLAG_TC));
 286:	80062683          	lw	a3,-2048(a2) # 40013800 <_eusrstack+0x20013000>
 28a:	0406f693          	andi	a3,a3,64
 28e:	dee5                	beqz	a3,286 <_write.constprop.0+0x10>
		USART1->DATAR = *buf++;
 290:	00f706b3          	add	a3,a4,a5
 294:	0006c683          	lbu	a3,0(a3)
	for(int i = 0; i < size; i++){
 298:	0785                	addi	a5,a5,1
		USART1->DATAR = *buf++;
 29a:	80d62223          	sw	a3,-2044(a2)
 29e:	b7cd                	j	280 <_write.constprop.0+0xa>

000002a0 <__puts_uart>:
{
 2a0:	1151                	addi	sp,sp,-12
 2a2:	c222                	sw	s0,4(sp)
 2a4:	c406                	sw	ra,8(sp)
 2a6:	842e                	mv	s0,a1
	_write( 0, s, len );
 2a8:	37f9                	jal	276 <_write.constprop.0>
}
 2aa:	40a2                	lw	ra,8(sp)
 2ac:	8522                	mv	a0,s0
 2ae:	4412                	lw	s0,4(sp)
 2b0:	0131                	addi	sp,sp,12
 2b2:	8082                	ret

000002b4 <handle_reset>:
	asm volatile( "\n\
 2b4:	20000197          	auipc	gp,0x20000
 2b8:	14818193          	addi	gp,gp,328 # 200003fc <__global_pointer$>
 2bc:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
 2c0:	6509                	lui	a0,0x2
 2c2:	88050513          	addi	a0,a0,-1920 # 1880 <ch32fun.c.6d3bed90+0x8d6>
 2c6:	30051073          	csrw	mstatus,a0
 2ca:	468d                	li	a3,3
 2cc:	00000517          	auipc	a0,0x0
 2d0:	d3450513          	addi	a0,a0,-716 # 0 <InterruptVector>
 2d4:	8d55                	or	a0,a0,a3
 2d6:	30551073          	csrw	mtvec,a0
asm volatile(
 2da:	c0418513          	addi	a0,gp,-1020 # 20000000 <count>
 2de:	c0c18593          	addi	a1,gp,-1012 # 20000008 <_ebss>
 2e2:	4601                	li	a2,0
 2e4:	00b55663          	bge	a0,a1,2f0 <handle_reset+0x3c>
 2e8:	c110                	sw	a2,0(a0)
 2ea:	0511                	addi	a0,a0,4
 2ec:	feb54ee3          	blt	a0,a1,2e8 <handle_reset+0x34>
 2f0:	00000517          	auipc	a0,0x0
 2f4:	60050513          	addi	a0,a0,1536 # 8f0 <_data_lma>
 2f8:	c0418593          	addi	a1,gp,-1020 # 20000000 <count>
 2fc:	c0418613          	addi	a2,gp,-1020 # 20000000 <count>
 300:	00c58863          	beq	a1,a2,310 <handle_reset+0x5c>
 304:	4114                	lw	a3,0(a0)
 306:	c194                	sw	a3,0(a1)
 308:	0511                	addi	a0,a0,4
 30a:	0591                	addi	a1,a1,4
 30c:	fec59ae3          	bne	a1,a2,300 <handle_reset+0x4c>
	SysTick->CTLR = 1;
 310:	e000f7b7          	lui	a5,0xe000f
 314:	4705                	li	a4,1
 316:	c398                	sw	a4,0(a5)
asm volatile(
 318:	68a00793          	li	a5,1674
 31c:	34179073          	csrw	mepc,a5
 320:	30200073          	mret

00000324 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
 324:	40021737          	lui	a4,0x40021
 328:	471c                	lw	a5,8(a4)
 32a:	008006b7          	lui	a3,0x800
 32e:	8fd5                	or	a5,a5,a3
 330:	c71c                	sw	a5,8(a4)

00000332 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
 332:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
 336:	2ca1                	jal	58e <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
 338:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
 33c:	2c89                	jal	58e <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
 33e:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
 342:	24b1                	jal	58e <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
 344:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
 348:	2499                	jal	58e <PrintHex>
	putchar( '\n' );
 34a:	4529                	li	a0,10
 34c:	2425                	jal	574 <putchar>
	asm volatile( "1: j 1b" );
 34e:	a001                	j	34e <ADC1_2_IRQHandler+0x1c>

00000350 <strlen>:
{
 350:	87aa                	mv	a5,a0
	for (; *s; s++);
 352:	0007c703          	lbu	a4,0(a5) # e000f000 <_eusrstack+0xc000e800>
 356:	e701                	bnez	a4,35e <strlen+0xe>
}
 358:	40a78533          	sub	a0,a5,a0
 35c:	8082                	ret
	for (; *s; s++);
 35e:	0785                	addi	a5,a5,1
 360:	bfcd                	j	352 <strlen+0x2>

00000362 <mini_vpprintf>:
{
 362:	fa410113          	addi	sp,sp,-92
 366:	c8a6                	sw	s1,80(sp)
 368:	cc86                	sw	ra,88(sp)
 36a:	caa2                	sw	s0,84(sp)
 36c:	c02a                	sw	a0,0(sp)
 36e:	c22e                	sw	a1,4(sp)
 370:	84b2                	mv	s1,a2
 372:	87b6                	mv	a5,a3
	int n = 0;
 374:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
 376:	0004c703          	lbu	a4,0(s1)
 37a:	00148413          	addi	s0,s1,1
 37e:	00e10fa3          	sb	a4,31(sp)
 382:	eb01                	bnez	a4,392 <mini_vpprintf+0x30>
}
 384:	40e6                	lw	ra,88(sp)
 386:	4456                	lw	s0,84(sp)
 388:	4542                	lw	a0,16(sp)
 38a:	44c6                	lw	s1,80(sp)
 38c:	05c10113          	addi	sp,sp,92
 390:	8082                	ret
		if (ch!='%') {
 392:	02500693          	li	a3,37
 396:	00d70f63          	beq	a4,a3,3b4 <mini_vpprintf+0x52>
 39a:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
 39c:	4612                	lw	a2,4(sp)
 39e:	4782                	lw	a5,0(sp)
 3a0:	4585                	li	a1,1
 3a2:	01f10513          	addi	a0,sp,31
 3a6:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
 3a8:	84a2                	mv	s1,s0
		n = n + len;
 3aa:	47c2                	lw	a5,16(sp)
 3ac:	97aa                	add	a5,a5,a0
 3ae:	c83e                	sw	a5,16(sp)
 3b0:	47a2                	lw	a5,8(sp)
 3b2:	b7d1                	j	376 <mini_vpprintf+0x14>
			ch=*(fmt++);
 3b4:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
 3b8:	03000613          	li	a2,48
			ch=*(fmt++);
 3bc:	00248713          	addi	a4,s1,2
 3c0:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
 3c4:	03000413          	li	s0,48
 3c8:	08c69063          	bne	a3,a2,448 <mini_vpprintf+0xe6>
				ch=*(fmt++);
 3cc:	84ba                	mv	s1,a4
 3ce:	4601                	li	a2,0
 3d0:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
 3d2:	4525                	li	a0,9
 3d4:	a811                	j	3e8 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
 3d6:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
 3da:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
 3dc:	9736                	add	a4,a4,a3
				ch=*(fmt++);
 3de:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
 3e2:	0706                	slli	a4,a4,0x1
 3e4:	972e                	add	a4,a4,a1
				ch=*(fmt++);
 3e6:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
 3e8:	fd068593          	addi	a1,a3,-48 # 7fffd0 <adc_fixed_fs.c.f42934dc+0x7fde95>
 3ec:	0ff5f313          	andi	t1,a1,255
 3f0:	fe6573e3          	bgeu	a0,t1,3d6 <mini_vpprintf+0x74>
 3f4:	c219                	beqz	a2,3fa <mini_vpprintf+0x98>
 3f6:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
 3fa:	c63a                	sw	a4,12(sp)
 3fc:	4661                	li	a2,24
 3fe:	00e65363          	bge	a2,a4,404 <mini_vpprintf+0xa2>
 402:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
 404:	06c00593          	li	a1,108
			char l = 0;
 408:	4601                	li	a2,0
			if (ch == 'l') {
 40a:	00b69863          	bne	a3,a1,41a <mini_vpprintf+0xb8>
				ch=*(fmt++);
 40e:	0004c683          	lbu	a3,0(s1)
				l = 1;
 412:	4605                	li	a2,1
				ch=*(fmt++);
 414:	0485                	addi	s1,s1,1
 416:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
 41a:	01f14683          	lbu	a3,31(sp)
 41e:	06400593          	li	a1,100
 422:	06b68363          	beq	a3,a1,488 <mini_vpprintf+0x126>
 426:	02d5e463          	bltu	a1,a3,44e <mini_vpprintf+0xec>
 42a:	05800713          	li	a4,88
 42e:	0ae68063          	beq	a3,a4,4ce <mini_vpprintf+0x16c>
 432:	06300713          	li	a4,99
 436:	0ae68d63          	beq	a3,a4,4f0 <mini_vpprintf+0x18e>
 43a:	d6a9                	beqz	a3,384 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
 43c:	4612                	lw	a2,4(sp)
 43e:	c43e                	sw	a5,8(sp)
 440:	4585                	li	a1,1
 442:	01f10513          	addi	a0,sp,31
 446:	a0bd                	j	4b4 <mini_vpprintf+0x152>
			char pad_char = ' ';
 448:	02000413          	li	s0,32
 44c:	b741                	j	3cc <mini_vpprintf+0x6a>
			switch (ch) {
 44e:	07500593          	li	a1,117
 452:	02b68b63          	beq	a3,a1,488 <mini_vpprintf+0x126>
 456:	07800613          	li	a2,120
 45a:	06c68a63          	beq	a3,a2,4ce <mini_vpprintf+0x16c>
 45e:	07300613          	li	a2,115
 462:	fcc69de3          	bne	a3,a2,43c <mini_vpprintf+0xda>
 466:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
 468:	00478713          	addi	a4,a5,4
 46c:	439c                	lw	a5,0(a5)
 46e:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
 470:	853e                	mv	a0,a5
 472:	ca3e                	sw	a5,20(sp)
 474:	3df1                	jal	350 <strlen>
					if (pad_to > 0) {
 476:	4762                	lw	a4,24(sp)
 478:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
 47a:	85aa                	mv	a1,a0
					if (pad_to > 0) {
 47c:	c759                	beqz	a4,50a <mini_vpprintf+0x1a8>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
 47e:	46b2                	lw	a3,12(sp)
 480:	1838                	addi	a4,sp,56
 482:	8622                	mv	a2,s0
 484:	853e                	mv	a0,a5
 486:	a01d                	j	4ac <mini_vpprintf+0x14a>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 488:	00478713          	addi	a4,a5,4
 48c:	c43a                	sw	a4,8(sp)
					if(l) {
 48e:	c615                	beqz	a2,4ba <mini_vpprintf+0x158>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 490:	f8b68693          	addi	a3,a3,-117
 494:	1018                	addi	a4,sp,32
 496:	0016b693          	seqz	a3,a3
 49a:	4388                	lw	a0,0(a5)
 49c:	4601                	li	a2,0
 49e:	45a9                	li	a1,10
 4a0:	3b21                	jal	1b8 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 4a2:	46b2                	lw	a3,12(sp)
 4a4:	1838                	addi	a4,sp,56
 4a6:	8622                	mv	a2,s0
 4a8:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 4aa:	1008                	addi	a0,sp,32
 4ac:	398d                	jal	11e <mini_pad>
					len = puts(bf, len, buf);
 4ae:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 4b0:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
 4b2:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
 4b4:	4782                	lw	a5,0(sp)
 4b6:	9782                	jalr	a5
					break;
 4b8:	bdcd                	j	3aa <mini_vpprintf+0x48>
						if(ch == 'u') {
 4ba:	07500713          	li	a4,117
 4be:	00e69563          	bne	a3,a4,4c8 <mini_vpprintf+0x166>
	if (radix > 16)
 4c2:	1018                	addi	a4,sp,32
 4c4:	4685                	li	a3,1
 4c6:	bfd1                	j	49a <mini_vpprintf+0x138>
 4c8:	1018                	addi	a4,sp,32
 4ca:	4681                	li	a3,0
 4cc:	b7f9                	j	49a <mini_vpprintf+0x138>
					if(l) {
 4ce:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 4d0:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
 4d4:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 4d8:	c43a                	sw	a4,8(sp)
	if (radix > 16)
 4da:	4685                	li	a3,1
 4dc:	1018                	addi	a4,sp,32
 4de:	00163613          	seqz	a2,a2
 4e2:	45c1                	li	a1,16
 4e4:	39d1                	jal	1b8 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 4e6:	46b2                	lw	a3,12(sp)
 4e8:	85aa                	mv	a1,a0
 4ea:	1838                	addi	a4,sp,56
 4ec:	8622                	mv	a2,s0
 4ee:	bf75                	j	4aa <mini_vpprintf+0x148>
					ch = (char)(va_arg(va, int));
 4f0:	00478713          	addi	a4,a5,4
 4f4:	439c                	lw	a5,0(a5)
 4f6:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 4f8:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
 4fa:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 4fe:	1838                	addi	a4,sp,56
 500:	8622                	mv	a2,s0
 502:	4585                	li	a1,1
 504:	01f10513          	addi	a0,sp,31
 508:	b755                	j	4ac <mini_vpprintf+0x14a>
						len = puts(ptr, len, buf);
 50a:	4612                	lw	a2,4(sp)
 50c:	853e                	mv	a0,a5
 50e:	b75d                	j	4b4 <mini_vpprintf+0x152>

00000510 <printf>:
{
 510:	fdc10113          	addi	sp,sp,-36
 514:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 516:	862a                	mv	a2,a0
{
 518:	c82e                	sw	a1,16(sp)
 51a:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 51c:	4581                	li	a1,0
	va_start( args, format );
 51e:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 520:	2a000513          	li	a0,672
{
 524:	c606                	sw	ra,12(sp)
 526:	ce3a                	sw	a4,28(sp)
 528:	d03e                	sw	a5,32(sp)
	va_start( args, format );
 52a:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 52c:	3d1d                	jal	362 <mini_vpprintf>
}
 52e:	40b2                	lw	ra,12(sp)
 530:	02410113          	addi	sp,sp,36
 534:	8082                	ret

00000536 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
 536:	962a                	add	a2,a2,a0
 538:	87aa                	mv	a5,a0
 53a:	00c79363          	bne	a5,a2,540 <memset+0xa>
 53e:	8082                	ret
 540:	00b78023          	sb	a1,0(a5)
 544:	0785                	addi	a5,a5,1
 546:	bfd5                	j	53a <memset+0x4>

00000548 <puts>:
{
 548:	1151                	addi	sp,sp,-12
 54a:	c406                	sw	ra,8(sp)
 54c:	c222                	sw	s0,4(sp)
 54e:	c026                	sw	s1,0(sp)
 550:	84aa                	mv	s1,a0
	int sl = strlen( s );
 552:	3bfd                	jal	350 <strlen>
 554:	842a                	mv	s0,a0
	_write(0, s, sl );
 556:	85aa                	mv	a1,a0
 558:	8526                	mv	a0,s1
 55a:	3b31                	jal	276 <_write.constprop.0>
	_write(0, "\n", 1 );
 55c:	6505                	lui	a0,0x1
 55e:	4585                	li	a1,1
 560:	86c50513          	addi	a0,a0,-1940 # 86c <TIM1_UP_IRQHandler+0x98>
 564:	3b09                	jal	276 <_write.constprop.0>
}
 566:	40a2                	lw	ra,8(sp)
 568:	00140513          	addi	a0,s0,1
 56c:	4412                	lw	s0,4(sp)
 56e:	4482                	lw	s1,0(sp)
 570:	0131                	addi	sp,sp,12
 572:	8082                	ret

00000574 <putchar>:
{
#ifdef CH5xx
	while(!(R8_UART1_LSR & RB_LSR_TX_ALL_EMP));
	R8_UART1_THR = c;
#else
	while( !(USART1->STATR & USART_FLAG_TC));
 574:	40014737          	lui	a4,0x40014
 578:	80072783          	lw	a5,-2048(a4) # 40013800 <_eusrstack+0x20013000>
 57c:	0407f793          	andi	a5,a5,64
 580:	dfe5                	beqz	a5,578 <putchar+0x4>
	USART1->DATAR = (const char)c;
 582:	0ff57513          	andi	a0,a0,255
 586:	80a72223          	sw	a0,-2044(a4)
#endif
	return 1;
}
 58a:	4505                	li	a0,1
 58c:	8082                	ret

0000058e <PrintHex>:
{
 58e:	1151                	addi	sp,sp,-12
 590:	c026                	sw	s1,0(sp)
 592:	84aa                	mv	s1,a0
	putchar( ' ' );
 594:	02000513          	li	a0,32
{
 598:	c406                	sw	ra,8(sp)
 59a:	c222                	sw	s0,4(sp)
	putchar( ' ' );
 59c:	3fe1                	jal	574 <putchar>
	putchar( '0' );
 59e:	03000513          	li	a0,48
 5a2:	3fc9                	jal	574 <putchar>
	putchar( 'x' );
 5a4:	07800513          	li	a0,120
 5a8:	37f1                	jal	574 <putchar>
	for( shift = 28; shift >= 0; shift -= 4 )
 5aa:	4471                	li	s0,28
		int s = (n>>shift) & 0xf;
 5ac:	0084d7b3          	srl	a5,s1,s0
 5b0:	8bbd                	andi	a5,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
 5b2:	4725                	li	a4,9
 5b4:	03000513          	li	a0,48
 5b8:	00f75463          	bge	a4,a5,5c0 <PrintHex+0x32>
 5bc:	05700513          	li	a0,87
		putchar( s );
 5c0:	953e                	add	a0,a0,a5
 5c2:	3f4d                	jal	574 <putchar>
	for( shift = 28; shift >= 0; shift -= 4 )
 5c4:	1471                	addi	s0,s0,-4
 5c6:	57f1                	li	a5,-4
 5c8:	fef412e3          	bne	s0,a5,5ac <PrintHex+0x1e>
}
 5cc:	40a2                	lw	ra,8(sp)
 5ce:	4412                	lw	s0,4(sp)
 5d0:	4482                	lw	s1,0(sp)
 5d2:	0131                	addi	sp,sp,12
 5d4:	8082                	ret

000005d6 <SystemInit>:
//#define BASE_CTLR	(((FUNCONF_HSITRIM) << 3) | HSEBYP | RCC_CSS)	// disable HSI in HSE modes

	// Flash latency settings.
#if defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
 5d6:	400227b7          	lui	a5,0x40022
 5da:	4705                	li	a4,1
 5dc:	c398                	sw	a4,0(a5)
	#endif

#elif defined(FUNCONF_USE_HSE) && FUNCONF_USE_HSE

	#if defined(CH32V003) || defined(CH32V00x)
		RCC->CTLR = BASE_CTLR | RCC_HSION | RCC_HSEON ;       		  // Keep HSI on while turning on HSE
 5de:	000907b7          	lui	a5,0x90
 5e2:	08178793          	addi	a5,a5,129 # 90081 <adc_fixed_fs.c.f42934dc+0x8df46>
 5e6:	40021737          	lui	a4,0x40021
 5ea:	c31c                	sw	a5,0(a4)
	#else
		RCC->CTLR = RCC_HSEON;							  			  // Only turn on HSE.
	#endif

	// Values lifted from the EVT.  There is little to no documentation on what this does.
	while(!(RCC->CTLR&RCC_HSERDY)) {};
 5ec:	000206b7          	lui	a3,0x20
 5f0:	400217b7          	lui	a5,0x40021
 5f4:	4398                	lw	a4,0(a5)
 5f6:	8f75                	and	a4,a4,a3
 5f8:	df75                	beqz	a4,5f4 <SystemInit+0x1e>

	#if defined(CH32V003) || defined(CH32V00x)
		RCC->CFGR0 = RCC_PLLSRC_HSE_Mul2 | RCC_SW_HSE;
 5fa:	6741                	lui	a4,0x10
 5fc:	0705                	addi	a4,a4,1
 5fe:	c3d8                	sw	a4,4(a5)
	#else
		RCC->CFGR0 = BASE_CFGR0 | RCC_PLLSRC_HSE | RCC_PLLXTPRE_HSE;
	#endif

	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CTLR  = BASE_CTLR | RCC_HSEON | RCC_PLLON;            // Turn off HSI.
 600:	01090737          	lui	a4,0x1090
 604:	08170713          	addi	a4,a4,129 # 1090081 <adc_fixed_fs.c.f42934dc+0x108df46>
 608:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_0;
	#endif
#endif

#ifndef CH5xx
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
 60a:	009f0737          	lui	a4,0x9f0
 60e:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH5xx)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
 610:	020006b7          	lui	a3,0x2000
 614:	40021737          	lui	a4,0x40021
 618:	431c                	lw	a5,0(a4)
 61a:	8ff5                	and	a5,a5,a3
 61c:	dff5                	beqz	a5,618 <SystemInit+0x42>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 61e:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 620:	4621                	li	a2,8
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 622:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
 624:	0027e793          	ori	a5,a5,2
 628:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 62a:	400217b7          	lui	a5,0x40021
 62e:	43d8                	lw	a4,4(a5)
 630:	8b31                	andi	a4,a4,12
 632:	fec71ee3          	bne	a4,a2,62e <SystemInit+0x58>
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_USART1;
 636:	4f98                	lw	a4,24(a5)
 638:	6691                	lui	a3,0x4
 63a:	02068693          	addi	a3,a3,32 # 4020 <adc_fixed_fs.c.f42934dc+0x1ee5>
 63e:	8f55                	or	a4,a4,a3
 640:	cf98                	sw	a4,24(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*5));
 642:	400117b7          	lui	a5,0x40011
 646:	4007a703          	lw	a4,1024(a5) # 40011400 <_eusrstack+0x20010c00>
 64a:	ff1006b7          	lui	a3,0xff100
 64e:	16fd                	addi	a3,a3,-1
 650:	8f75                	and	a4,a4,a3
 652:	40e7a023          	sw	a4,1024(a5)
	GPIOD->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*5);
 656:	4007a703          	lw	a4,1024(a5)
 65a:	009006b7          	lui	a3,0x900
 65e:	8f55                	or	a4,a4,a3
 660:	40e7a023          	sw	a4,1024(a5)
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
 664:	400147b7          	lui	a5,0x40014
 668:	80c7a623          	sw	a2,-2036(a5) # 4001380c <_eusrstack+0x2001300c>
	USART1->CTLR2 = USART_StopBits_1;
 66c:	8007a823          	sw	zero,-2032(a5)
	USART1->CTLR3 = USART_HardwareFlowControl_None;
 670:	8007aa23          	sw	zero,-2028(a5)
	USART1->BRR = uartBRR;
 674:	0d000713          	li	a4,208
 678:	80e7a423          	sw	a4,-2040(a5)
	USART1->CTLR1 |= CTLR1_UE_Set;
 67c:	80c7a703          	lw	a4,-2036(a5)
 680:	6689                	lui	a3,0x2
 682:	8f55                	or	a4,a4,a3
 684:	80e7a623          	sw	a4,-2036(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
 688:	8082                	ret

0000068a <main>:
        
    }
}

//-----------------------------------------------------------------------------------
int main() {
 68a:	1151                	addi	sp,sp,-12
 68c:	c406                	sw	ra,8(sp)
 68e:	c222                	sw	s0,4(sp)
    SystemInit();
 690:	3799                	jal	5d6 <SystemInit>
    printf("Initializing ADC... (bjs pin PD4 I think...)\r\n");
 692:	6505                	lui	a0,0x1
 694:	87050513          	addi	a0,a0,-1936 # 870 <TIM1_UP_IRQHandler+0x9c>
 698:	3d45                	jal	548 <puts>
    RCC->CFGR0 &= ~(0x1F<<11);
 69a:	400217b7          	lui	a5,0x40021
 69e:	43d8                	lw	a4,4(a5)
 6a0:	76c1                	lui	a3,0xffff0
 6a2:	7ff68693          	addi	a3,a3,2047 # ffff07ff <_eusrstack+0xdffeffff>
 6a6:	8f75                	and	a4,a4,a3
 6a8:	c3d8                	sw	a4,4(a5)
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_ADC1;
 6aa:	4f98                	lw	a4,24(a5)
    GPIOD->CFGLR &= ~(0xf<<(4*4));    // pin D4 analog-in  now
 6ac:	40011637          	lui	a2,0x40011
 6b0:	fff106b7          	lui	a3,0xfff10
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_ADC1;
 6b4:	22076713          	ori	a4,a4,544
 6b8:	cf98                	sw	a4,24(a5)
    GPIOD->CFGLR &= ~(0xf<<(4*4));    // pin D4 analog-in  now
 6ba:	40062703          	lw	a4,1024(a2) # 40011400 <_eusrstack+0x20010c00>
 6be:	16fd                	addi	a3,a3,-1
    ADC1->RSQR1 = 0;
 6c0:	40012437          	lui	s0,0x40012
    GPIOD->CFGLR &= ~(0xf<<(4*4));    // pin D4 analog-in  now
 6c4:	8f75                	and	a4,a4,a3
 6c6:	40e62023          	sw	a4,1024(a2)
    RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
 6ca:	47d8                	lw	a4,12(a5)
    printf("Calibrating ADC...\r\n");
 6cc:	6505                	lui	a0,0x1
 6ce:	8a050513          	addi	a0,a0,-1888 # 8a0 <TIM1_UP_IRQHandler+0xcc>
    RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
 6d2:	20076713          	ori	a4,a4,512
 6d6:	c7d8                	sw	a4,12(a5)
    RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
 6d8:	47d8                	lw	a4,12(a5)
 6da:	dff77713          	andi	a4,a4,-513
 6de:	c7d8                	sw	a4,12(a5)
    ADC1->RSQR1 = 0;
 6e0:	42042623          	sw	zero,1068(s0) # 4001242c <_eusrstack+0x20011c2c>
    ADC1->RSQR2 = 0;
 6e4:	42042823          	sw	zero,1072(s0)
    ADC1->RSQR3 = 7;
 6e8:	479d                	li	a5,7
 6ea:	42f42a23          	sw	a5,1076(s0)
     ADC1->SAMPTR2 &= ~(ADC_SMP0<<(3*7));
 6ee:	41042783          	lw	a5,1040(s0)
 6f2:	ff200737          	lui	a4,0xff200
 6f6:	177d                	addi	a4,a4,-1
 6f8:	8ff9                	and	a5,a5,a4
 6fa:	40f42823          	sw	a5,1040(s0)
     ADC1->SAMPTR2 |= 7<<(3*7);	// 0:7 => 3/9/15/30/43/57/73/241 cycles
 6fe:	41042783          	lw	a5,1040(s0)
 702:	00e00737          	lui	a4,0xe00
 706:	8fd9                	or	a5,a5,a4
 708:	40f42823          	sw	a5,1040(s0)
    ADC1->CTLR2  = ADC_ADON  | ADC_EXTSEL;
 70c:	000e07b7          	lui	a5,0xe0
 710:	0785                	addi	a5,a5,1
 712:	40f42423          	sw	a5,1032(s0)
    printf("Calibrating ADC...\r\n");
 716:	3d0d                	jal	548 <puts>
    ADC1->CTLR2 |= ADC_RSTCAL;
 718:	40842783          	lw	a5,1032(s0)
    while(ADC1->CTLR2 & ADC_RSTCAL);   
 71c:	400126b7          	lui	a3,0x40012
    ADC1->CTLR2 |= ADC_RSTCAL;
 720:	0087e793          	ori	a5,a5,8
 724:	40f42423          	sw	a5,1032(s0)
    while(ADC1->CTLR2 & ADC_RSTCAL);   
 728:	4086a703          	lw	a4,1032(a3) # 40012408 <_eusrstack+0x20011c08>
 72c:	8b21                	andi	a4,a4,8
 72e:	ff6d                	bnez	a4,728 <main+0x9e>
    ADC1->CTLR2 |= ADC_CAL;
 730:	4086a703          	lw	a4,1032(a3)
 734:	00476713          	ori	a4,a4,4
 738:	40e6a423          	sw	a4,1032(a3)
    while(ADC1->CTLR2 & ADC_CAL);
 73c:	40012737          	lui	a4,0x40012
 740:	40872783          	lw	a5,1032(a4) # 40012408 <_eusrstack+0x20011c08>
 744:	8b91                	andi	a5,a5,4
 746:	ffed                	bnez	a5,740 <main+0xb6>
    printf("Calibrating done...\r\n");
 748:	6505                	lui	a0,0x1
 74a:	8b450513          	addi	a0,a0,-1868 # 8b4 <TIM1_UP_IRQHandler+0xe0>
 74e:	3bed                	jal	548 <puts>
    printf("Initializing timer...\r\n");
 750:	6505                	lui	a0,0x1
 752:	8cc50513          	addi	a0,a0,-1844 # 8cc <TIM1_UP_IRQHandler+0xf8>
 756:	3bcd                	jal	548 <puts>
    RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
 758:	400216b7          	lui	a3,0x40021
 75c:	4e9c                	lw	a5,24(a3)
 75e:	6705                	lui	a4,0x1
 760:	80070713          	addi	a4,a4,-2048 # 800 <TIM1_UP_IRQHandler+0x2c>
 764:	8fd9                	or	a5,a5,a4
 766:	ce9c                	sw	a5,24(a3)
    TIM1->CTLR1 |= TIM_CounterMode_Up | TIM_CKD_DIV1;
 768:	40013737          	lui	a4,0x40013
 76c:	c0075683          	lhu	a3,-1024(a4) # 40012c00 <_eusrstack+0x20012400>
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 770:	4621                	li	a2,8
    init_adc();
    init_timer();
   
    int a,i=12;
    unsigned char c;
    printf("here %d\n",i);
 772:	6505                	lui	a0,0x1
    TIM1->CTLR1 |= TIM_CounterMode_Up | TIM_CKD_DIV1;
 774:	06c2                	slli	a3,a3,0x10
 776:	82c1                	srli	a3,a3,0x10
 778:	c0d71023          	sh	a3,-1024(a4)
    TIM1->CTLR2 = TIM_MMS_1;
 77c:	02000693          	li	a3,32
 780:	c0d71223          	sh	a3,-1020(a4)
    TIM1->ATRLR = 80;   // lower = higher sample rate. 800 for 6400sam/sec
 784:	05000693          	li	a3,80
 788:	c2d71623          	sh	a3,-980(a4)
    TIM1->PSC = 10-1;
 78c:	46a5                	li	a3,9
 78e:	c2d71423          	sh	a3,-984(a4)
    TIM1->RPTCR = 0;
 792:	c2071823          	sh	zero,-976(a4)
    TIM1->SWEVGR = TIM_PSCReloadMode_Immediate;
 796:	4685                	li	a3,1
 798:	c0d71a23          	sh	a3,-1004(a4)
 79c:	e000e6b7          	lui	a3,0xe000e
 7a0:	10c6a223          	sw	a2,260(a3) # e000e104 <_eusrstack+0xc000d904>
    TIM1->INTFR = ~TIM_FLAG_Update;
 7a4:	56f9                	li	a3,-2
 7a6:	c0d71823          	sh	a3,-1008(a4)
    TIM1->DMAINTENR |= TIM_IT_Update;
 7aa:	c0c75683          	lhu	a3,-1012(a4)
    printf("here %d\n",i);
 7ae:	45b1                	li	a1,12
 7b0:	8e450513          	addi	a0,a0,-1820 # 8e4 <TIM1_UP_IRQHandler+0x110>
    TIM1->DMAINTENR |= TIM_IT_Update;
 7b4:	06c2                	slli	a3,a3,0x10
 7b6:	82c1                	srli	a3,a3,0x10
 7b8:	0016e693          	ori	a3,a3,1
 7bc:	c0d71623          	sh	a3,-1012(a4)
    TIM1->CTLR1 |= TIM_CEN;
 7c0:	c0075783          	lhu	a5,-1024(a4)
 7c4:	07c2                	slli	a5,a5,0x10
 7c6:	83c1                	srli	a5,a5,0x10
 7c8:	0017e793          	ori	a5,a5,1
 7cc:	c0f71023          	sh	a5,-1024(a4)
    printf("here %d\n",i);
 7d0:	3381                	jal	510 <printf>
    
    while(1) {
 7d2:	a001                	j	7d2 <main+0x148>

000007d4 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler() {
 7d4:	7179                	addi	sp,sp,-48
 7d6:	c03e                	sw	a5,0(sp)
    if(TIM1->INTFR & TIM_FLAG_Update) {
 7d8:	400137b7          	lui	a5,0x40013
void TIM1_UP_IRQHandler() {
 7dc:	c23a                	sw	a4,4(sp)
    if(TIM1->INTFR & TIM_FLAG_Update) {
 7de:	c107d703          	lhu	a4,-1008(a5) # 40012c10 <_eusrstack+0x20012410>
void TIM1_UP_IRQHandler() {
 7e2:	d606                	sw	ra,44(sp)
 7e4:	d416                	sw	t0,40(sp)
 7e6:	d21a                	sw	t1,36(sp)
 7e8:	d01e                	sw	t2,32(sp)
 7ea:	ce22                	sw	s0,28(sp)
 7ec:	cc26                	sw	s1,24(sp)
 7ee:	ca2a                	sw	a0,20(sp)
 7f0:	c82e                	sw	a1,16(sp)
 7f2:	c632                	sw	a2,12(sp)
 7f4:	c436                	sw	a3,8(sp)
    if(TIM1->INTFR & TIM_FLAG_Update) {
 7f6:	8b05                	andi	a4,a4,1
 7f8:	cb39                	beqz	a4,84e <TIM1_UP_IRQHandler+0x7a>
 7fa:	c0078793          	addi	a5,a5,-1024
        TIM1->INTFR = ~TIM_FLAG_Update;
 7fe:	5779                	li	a4,-2
 800:	00e79823          	sh	a4,16(a5)
	result= ADC1->RDATAR; result-=512;
 804:	400127b7          	lui	a5,0x40012
 808:	44c7a503          	lw	a0,1100(a5) # 4001244c <_eusrstack+0x20011c4c>
	total+=result; count++;
 80c:	c0818413          	addi	s0,gp,-1016 # 20000004 <total>
 810:	401c                	lw	a5,0(s0)
 812:	c0418493          	addi	s1,gp,-1020 # 20000000 <count>
	result= ADC1->RDATAR; result-=512;
 816:	e0050513          	addi	a0,a0,-512
	total+=result; count++;
 81a:	953e                	add	a0,a0,a5
 81c:	409c                	lw	a5,0(s1)
 81e:	c008                	sw	a0,0(s0)
	if (count==8) {
 820:	4721                	li	a4,8
	total+=result; count++;
 822:	0785                	addi	a5,a5,1
 824:	c09c                	sw	a5,0(s1)
	if (count==8) {
 826:	00e79b63          	bne	a5,a4,83c <TIM1_UP_IRQHandler+0x68>
	  total>>=3; 	
 82a:	850d                	srai	a0,a0,0x3
	  total+=127;
 82c:	07f50513          	addi	a0,a0,127
 830:	c008                	sw	a0,0(s0)
	  printf("%c",total);   // averaged
 832:	3389                	jal	574 <putchar>
	  total=0; count=0;
 834:	00042023          	sw	zero,0(s0)
 838:	0004a023          	sw	zero,0(s1)
	ADC1->CTLR2 |= ADC_SWSTART; // start next ADC conversion
 83c:	400127b7          	lui	a5,0x40012
 840:	4087a703          	lw	a4,1032(a5) # 40012408 <_eusrstack+0x20011c08>
 844:	004006b7          	lui	a3,0x400
 848:	8f55                	or	a4,a4,a3
 84a:	40e7a423          	sw	a4,1032(a5)
}
 84e:	4472                	lw	s0,28(sp)
 850:	50b2                	lw	ra,44(sp)
 852:	52a2                	lw	t0,40(sp)
 854:	5312                	lw	t1,36(sp)
 856:	5382                	lw	t2,32(sp)
 858:	44e2                	lw	s1,24(sp)
 85a:	4552                	lw	a0,20(sp)
 85c:	45c2                	lw	a1,16(sp)
 85e:	4632                	lw	a2,12(sp)
 860:	46a2                	lw	a3,8(sp)
 862:	4712                	lw	a4,4(sp)
 864:	4782                	lw	a5,0(sp)
 866:	6145                	addi	sp,sp,48
 868:	30200073          	mret
 86c:	000a                	c.slli	zero,0x2
 86e:	0000                	unimp
 870:	6e49                	lui	t3,0x12
 872:	7469                	lui	s0,0xffffa
 874:	6169                	addi	sp,sp,208
 876:	696c                	flw	fa1,84(a0)
 878:	697a                	flw	fs2,156(sp)
 87a:	676e                	flw	fa4,216(sp)
 87c:	4120                	lw	s0,64(a0)
 87e:	4344                	lw	s1,4(a4)
 880:	2e2e                	fld	ft8,200(sp)
 882:	202e                	fld	ft0,200(sp)
 884:	6228                	flw	fa0,64(a2)
 886:	736a                	flw	ft6,184(sp)
 888:	7020                	flw	fs0,96(s0)
 88a:	6e69                	lui	t3,0x1a
 88c:	5020                	lw	s0,96(s0)
 88e:	3444                	fld	fs1,168(s0)
 890:	4920                	lw	s0,80(a0)
 892:	7420                	flw	fs0,104(s0)
 894:	6968                	flw	fa0,84(a0)
 896:	6b6e                	flw	fs6,216(sp)
 898:	2e2e                	fld	ft8,200(sp)
 89a:	292e                	fld	fs2,200(sp)
 89c:	000d                	c.nop	3
 89e:	0000                	unimp
 8a0:	696c6143          	fmadd.s	ft2,fs8,fs6,fa3,unknown
 8a4:	7262                	flw	ft4,56(sp)
 8a6:	7461                	lui	s0,0xffff8
 8a8:	6e69                	lui	t3,0x1a
 8aa:	44412067          	0x44412067
 8ae:	2e2e2e43          	fmadd.q	ft8,ft8,ft2,ft5,rdn
 8b2:	000d                	c.nop	3
 8b4:	696c6143          	fmadd.s	ft2,fs8,fs6,fa3,unknown
 8b8:	7262                	flw	ft4,56(sp)
 8ba:	7461                	lui	s0,0xffff8
 8bc:	6e69                	lui	t3,0x1a
 8be:	6f642067          	0x6f642067
 8c2:	656e                	flw	fa0,216(sp)
 8c4:	2e2e                	fld	ft8,200(sp)
 8c6:	0d2e                	slli	s10,s10,0xb
 8c8:	0000                	unimp
 8ca:	0000                	unimp
 8cc:	6e49                	lui	t3,0x12
 8ce:	7469                	lui	s0,0xffffa
 8d0:	6169                	addi	sp,sp,208
 8d2:	696c                	flw	fa1,84(a0)
 8d4:	697a                	flw	fs2,156(sp)
 8d6:	676e                	flw	fa4,216(sp)
 8d8:	7420                	flw	fs0,104(s0)
 8da:	6d69                	lui	s10,0x1a
 8dc:	7265                	lui	tp,0xffff9
 8de:	2e2e                	fld	ft8,200(sp)
 8e0:	0d2e                	slli	s10,s10,0xb
 8e2:	0000                	unimp
 8e4:	6568                	flw	fa0,76(a0)
 8e6:	6572                	flw	fa0,28(sp)
 8e8:	2520                	fld	fs0,72(a0)
 8ea:	0a64                	addi	s1,sp,284
 8ec:	0000                	unimp
	...
